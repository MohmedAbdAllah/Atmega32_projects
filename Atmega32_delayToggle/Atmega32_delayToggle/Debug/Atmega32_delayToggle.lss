
Atmega32_delayToggle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  0000080f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  000013be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	uint8_t inc = 0;
	CLRBIT(DDRA,1);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8d 7f       	andi	r24, 0xFD	; 253
  70:	8a bb       	out	0x1a, r24	; 26
	SETBIT(PORTA,1);
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8b bb       	out	0x1b, r24	; 27
	
	SETBIT(DDRB,0);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	87 bb       	out	0x17, r24	; 23
	CLRBIT(PORTB,0);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	88 bb       	out	0x18, r24	; 24


int main(void)
{
    /* Replace with your application code */
	uint8_t inc = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	03 c0       	rjmp	.+6      	; 0x8e <main+0x22>
			_delay_ms(100);
			CLRBIT(PORTB,0);
			inc = 1;
		}
		else if((READBIT(PINA,1) == 1)&&(inc == 1)){
			inc = 2;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	01 c0       	rjmp	.+2      	; 0x8e <main+0x22>
			_delay_ms(500);
			CLRBIT(PORTB,0);
			inc = 3;
		}
		else if((READBIT(PINA,1) == 1)&&(inc == 3)){
			inc = 0;
  8c:	80 e0       	ldi	r24, 0x00	; 0
	SETBIT(DDRB,0);
	CLRBIT(PORTB,0);
	
	while (1)
	{
		if((READBIT(PINA,1) == 0)&&(inc == 0)){
  8e:	c9 99       	sbic	0x19, 1	; 25
  90:	13 c0       	rjmp	.+38     	; 0xb8 <main+0x4c>
  92:	81 11       	cpse	r24, r1
  94:	11 c0       	rjmp	.+34     	; 0xb8 <main+0x4c>
			SETBIT(PORTB,0);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	81 ee       	ldi	r24, 0xE1	; 225
  a0:	94 e0       	ldi	r25, 0x04	; 4
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
			_delay_ms(100);
			CLRBIT(PORTB,0);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	88 bb       	out	0x18, r24	; 24
			inc = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	eb cf       	rjmp	.-42     	; 0x8e <main+0x22>
		}
		else if((READBIT(PINA,1) == 1)&&(inc == 1)){
  b8:	c9 9b       	sbis	0x19, 1	; 25
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	21 f3       	breq	.-56     	; 0x88 <main+0x1c>
			inc = 2;
		}
		
		else if((READBIT(PINA,1) == 0)&&(inc == 2)){
  c0:	c9 99       	sbic	0x19, 1	; 25
  c2:	13 c0       	rjmp	.+38     	; 0xea <main+0x7e>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	89 f4       	brne	.+34     	; 0xea <main+0x7e>
			SETBIT(PORTB,0);
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
			_delay_ms(500);
			CLRBIT(PORTB,0);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	88 bb       	out	0x18, r24	; 24
			inc = 3;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	d2 cf       	rjmp	.-92     	; 0x8e <main+0x22>
		}
		else if((READBIT(PINA,1) == 1)&&(inc == 3)){
  ea:	c9 9b       	sbis	0x19, 1	; 25
  ec:	d0 cf       	rjmp	.-96     	; 0x8e <main+0x22>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	71 f6       	brne	.-100    	; 0x8e <main+0x22>
  f2:	cc cf       	rjmp	.-104    	; 0x8c <main+0x20>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
