
Atmega32_TOGGLE_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000588  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000225  00000000  00000000  00000c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000042  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	uint8_t inc = 2, x = 0;
	CLRBIT(DDRA,1);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8d 7f       	andi	r24, 0xFD	; 253
  70:	8a bb       	out	0x1a, r24	; 26
	SETBIT(PORTA,1);
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8b bb       	out	0x1b, r24	; 27
	
	SETBIT(DDRB,0);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	87 bb       	out	0x17, r24	; 23
	CLRBIT(PORTB,0);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	88 bb       	out	0x18, r24	; 24


int main(void)
{
    /* Replace with your application code */
	uint8_t inc = 2, x = 0;
  84:	82 e0       	ldi	r24, 0x02	; 2
	SETBIT(DDRB,0);
	CLRBIT(PORTB,0);
	
    while (1) 
    {
		if((READBIT(PINA,1) == 0)&&(inc == 2)){
  86:	c9 99       	sbic	0x19, 1	; 25
  88:	08 c0       	rjmp	.+16     	; 0x9a <main+0x2e>
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	31 f4       	brne	.+12     	; 0x9a <main+0x2e>
			SETBIT(PORTB,0);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
			inc = 1;
			while(x == READBIT(PINA,PINA1));
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x28>
	
    while (1) 
    {
		if((READBIT(PINA,1) == 0)&&(inc == 2)){
			SETBIT(PORTB,0);
			inc = 1;
  98:	81 e0       	ldi	r24, 0x01	; 1
			while(x == READBIT(PINA,PINA1));
		}
		
		if((READBIT(PINA,1) == 0)&&(inc == 1)){
  9a:	c9 99       	sbic	0x19, 1	; 25
  9c:	f4 cf       	rjmp	.-24     	; 0x86 <main+0x1a>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 f7       	brne	.-28     	; 0x86 <main+0x1a>
			CLRBIT(PORTB,0);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	88 bb       	out	0x18, r24	; 24
			inc = 2;
			while(x == READBIT(PINA,PINA1));
  a8:	c9 9b       	sbis	0x19, 1	; 25
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x3c>
			while(x == READBIT(PINA,PINA1));
		}
		
		if((READBIT(PINA,1) == 0)&&(inc == 1)){
			CLRBIT(PORTB,0);
			inc = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	eb cf       	rjmp	.-42     	; 0x86 <main+0x1a>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
