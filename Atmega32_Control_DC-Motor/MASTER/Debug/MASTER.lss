
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001e4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c8  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072d  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000520  00000000  00000000  0000136d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SEVEN_SEG_write>:
  92:	94 b3       	in	r25, 0x14	; 20
  94:	9f ef       	ldi	r25, 0xFF	; 255
  96:	94 bb       	out	0x14, r25	; 20
  98:	9a b3       	in	r25, 0x1a	; 26
  9a:	93 60       	ori	r25, 0x03	; 3
  9c:	9a bb       	out	0x1a, r25	; 26
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	93 60       	ori	r25, 0x03	; 3
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	ed ec       	ldi	r30, 0xCD	; 205
  a6:	8e 9f       	mul	r24, r30
  a8:	e1 2d       	mov	r30, r1
  aa:	11 24       	eor	r1, r1
  ac:	e6 95       	lsr	r30
  ae:	e6 95       	lsr	r30
  b0:	e6 95       	lsr	r30
  b2:	2e 2f       	mov	r18, r30
  b4:	22 0f       	add	r18, r18
  b6:	92 2f       	mov	r25, r18
  b8:	99 0f       	add	r25, r25
  ba:	99 0f       	add	r25, r25
  bc:	92 0f       	add	r25, r18
  be:	89 1b       	sub	r24, r25
  c0:	98 2f       	mov	r25, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8a e1       	ldi	r24, 0x1A	; 26
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <SEVEN_SEG_write+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <SEVEN_SEG_write+0x48>
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	2b bb       	out	0x1b, r18	; 27
  de:	e9 2f       	mov	r30, r25
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	8a e1       	ldi	r24, 0x1A	; 26
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <SEVEN_SEG_write+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <SEVEN_SEG_write+0x66>
  f8:	2b bb       	out	0x1b, r18	; 27
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
	/* Replace with your application code */
	//make the first three pin in port a input pull up
	PORTA |= 0b00011100;
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	8c 61       	ori	r24, 0x1C	; 28
 100:	8b bb       	out	0x1b, r24	; 27
	//initialize the SPI as a master.
	SPI_init_master();
 102:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_init_master>
	while (1){
		//display the new speed on 7 segment
		SEVEN_SEG_write(speed);
 106:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <speed>
 10a:	0e 94 49 00 	call	0x92	; 0x92 <SEVEN_SEG_write>
		//check the press key and the range of speed.
		if(INC == 0){
 10e:	ca 99       	sbic	0x19, 2	; 25
 110:	09 c0       	rjmp	.+18     	; 0x124 <main+0x28>
			//_delay_ms(250);
			while(INC == 0);
 112:	ca 9b       	sbis	0x19, 2	; 25
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x16>
			if(speed <= 99) speed += 10;
 116:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <speed>
 11a:	84 36       	cpi	r24, 0x64	; 100
 11c:	18 f4       	brcc	.+6      	; 0x124 <main+0x28>
 11e:	86 5f       	subi	r24, 0xF6	; 246
 120:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <speed>
		}if(DEC == 0){
 124:	cb 99       	sbic	0x19, 3	; 25
 126:	09 c0       	rjmp	.+18     	; 0x13a <main+0x3e>
			//_delay_ms(250);
			while(DEC == 0);
 128:	cb 9b       	sbis	0x19, 3	; 25
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x2c>
			if(speed > 0) speed -= 10;
 12c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <speed>
 130:	88 23       	and	r24, r24
 132:	19 f0       	breq	.+6      	; 0x13a <main+0x3e>
 134:	8a 50       	subi	r24, 0x0A	; 10
 136:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <speed>
		}if(STOP==0){
 13a:	cc 99       	sbic	0x19, 4	; 25
 13c:	04 c0       	rjmp	.+8      	; 0x146 <main+0x4a>
			//_delay_ms(250);
			while(STOP == 0);
 13e:	cc 9b       	sbis	0x19, 4	; 25
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0x42>
			speed = 0;
 142:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <speed>
		}
		//send the new speed to the slave.
		if(new_speed != speed){
 146:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
 14a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <speed>
 14e:	98 17       	cp	r25, r24
 150:	d1 f2       	breq	.-76     	; 0x106 <main+0xa>
			SPI_mo(speed);
 152:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_mo>
			new_speed = speed;
 156:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <speed>
 15a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 15e:	d3 cf       	rjmp	.-90     	; 0x106 <main+0xa>

00000160 <SPI_init_master>:
	CLRBIT(PORTB,PIND4);
	SPDR = data;
	while(READBIT(SPSR,SPIF) == 0);
	SETBIT(PORTB,PIND4);
	return SPDR;
}
 160:	87 b3       	in	r24, 0x17	; 23
 162:	80 61       	ori	r24, 0x10	; 16
 164:	87 bb       	out	0x17, r24	; 23
 166:	87 b3       	in	r24, 0x17	; 23
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	87 bb       	out	0x17, r24	; 23
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	8f 7b       	andi	r24, 0xBF	; 191
 170:	87 bb       	out	0x17, r24	; 23
 172:	87 b3       	in	r24, 0x17	; 23
 174:	80 68       	ori	r24, 0x80	; 128
 176:	87 bb       	out	0x17, r24	; 23
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	8d b9       	out	0x0d, r24	; 13
 17c:	08 95       	ret

0000017e <SPI_mo>:
 17e:	98 b3       	in	r25, 0x18	; 24
 180:	9f 7e       	andi	r25, 0xEF	; 239
 182:	98 bb       	out	0x18, r25	; 24
 184:	8f b9       	out	0x0f, r24	; 15
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <SPI_mo+0x8>
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	88 bb       	out	0x18, r24	; 24
 190:	08 95       	ret

00000192 <__vector_12>:
ISR(SPI_STC_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	SPI_stc_vect();
 1b4:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <SPI_stc_vect>
 1b8:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <SPI_stc_vect+0x1>
 1bc:	09 95       	icall
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
