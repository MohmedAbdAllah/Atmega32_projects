
Atmega32_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000756  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006a  0080006a  000007f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140a  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab8  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f72  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7d  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_2>
   c:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_10>
  2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bb 02 	call	0x576	; 0x576 <main>
  8a:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SEVEN_SEG_write>:
	0b1111111,
	0b1101111
};

void SEVEN_SEG_write(uint8_t num , uint8_t h_m_s){
	INIT_SS_PIN
  92:	94 b3       	in	r25, 0x14	; 20
  94:	9f ef       	ldi	r25, 0xFF	; 255
  96:	94 bb       	out	0x14, r25	; 20
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	9a bb       	out	0x1a, r25	; 26
  9c:	2b b3       	in	r18, 0x1b	; 27
  9e:	9b bb       	out	0x1b, r25	; 27
	uint8_t digit_1= num/10;
  a0:	ed ec       	ldi	r30, 0xCD	; 205
  a2:	8e 9f       	mul	r24, r30
  a4:	e1 2d       	mov	r30, r1
  a6:	11 24       	eor	r1, r1
  a8:	e6 95       	lsr	r30
  aa:	e6 95       	lsr	r30
  ac:	e6 95       	lsr	r30
	uint8_t digit_2= num%10;
  ae:	2e 2f       	mov	r18, r30
  b0:	22 0f       	add	r18, r18
  b2:	92 2f       	mov	r25, r18
  b4:	99 0f       	add	r25, r25
  b6:	99 0f       	add	r25, r25
  b8:	92 0f       	add	r25, r18
  ba:	89 1b       	sub	r24, r25
  bc:	98 2f       	mov	r25, r24
	uint8_t seg1 = 0,seg2 = 0;
	
	
	if(h_m_s == 'h') {seg1 = 1;seg2 = 2;}
  be:	68 36       	cpi	r22, 0x68	; 104
  c0:	39 f0       	breq	.+14     	; 0xd0 <SEVEN_SEG_write+0x3e>
	else if(h_m_s == 'm') {seg1 = 3;seg2 = 4;}
  c2:	6d 36       	cpi	r22, 0x6D	; 109
  c4:	41 f0       	breq	.+16     	; 0xd6 <SEVEN_SEG_write+0x44>
	else if(h_m_s == 's') {seg1 = 5;seg2 = 6;}
  c6:	63 37       	cpi	r22, 0x73	; 115
  c8:	49 f0       	breq	.+18     	; 0xdc <SEVEN_SEG_write+0x4a>

void SEVEN_SEG_write(uint8_t num , uint8_t h_m_s){
	INIT_SS_PIN
	uint8_t digit_1= num/10;
	uint8_t digit_2= num%10;
	uint8_t seg1 = 0,seg2 = 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <SEVEN_SEG_write+0x4e>
	
	
	if(h_m_s == 'h') {seg1 = 1;seg2 = 2;}
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <SEVEN_SEG_write+0x4e>
	else if(h_m_s == 'm') {seg1 = 3;seg2 = 4;}
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	23 e0       	ldi	r18, 0x03	; 3
  da:	02 c0       	rjmp	.+4      	; 0xe0 <SEVEN_SEG_write+0x4e>
	else if(h_m_s == 's') {seg1 = 5;seg2 = 6;}
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	25 e0       	ldi	r18, 0x05	; 5
	
	
	PORT_WRITE = ss_arr[digit_1];
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	30 81       	ld	r19, Z
  e8:	35 bb       	out	0x15, r19	; 21
	switch (seg1){
  ea:	23 30       	cpi	r18, 0x03	; 3
  ec:	a1 f0       	breq	.+40     	; 0x116 <SEVEN_SEG_write+0x84>
  ee:	28 f4       	brcc	.+10     	; 0xfa <SEVEN_SEG_write+0x68>
  f0:	21 30       	cpi	r18, 0x01	; 1
  f2:	49 f0       	breq	.+18     	; 0x106 <SEVEN_SEG_write+0x74>
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	59 f0       	breq	.+22     	; 0x10e <SEVEN_SEG_write+0x7c>
  f8:	1d c0       	rjmp	.+58     	; 0x134 <SEVEN_SEG_write+0xa2>
  fa:	25 30       	cpi	r18, 0x05	; 5
  fc:	a1 f0       	breq	.+40     	; 0x126 <SEVEN_SEG_write+0x94>
  fe:	78 f0       	brcs	.+30     	; 0x11e <SEVEN_SEG_write+0x8c>
 100:	26 30       	cpi	r18, 0x06	; 6
 102:	a9 f0       	breq	.+42     	; 0x12e <SEVEN_SEG_write+0x9c>
 104:	17 c0       	rjmp	.+46     	; 0x134 <SEVEN_SEG_write+0xa2>
		case 1: E0;break;
 106:	2b b3       	in	r18, 0x1b	; 27
 108:	2e 7f       	andi	r18, 0xFE	; 254
 10a:	2b bb       	out	0x1b, r18	; 27
 10c:	13 c0       	rjmp	.+38     	; 0x134 <SEVEN_SEG_write+0xa2>
		case 2: E1;break;
 10e:	2b b3       	in	r18, 0x1b	; 27
 110:	2d 7f       	andi	r18, 0xFD	; 253
 112:	2b bb       	out	0x1b, r18	; 27
 114:	0f c0       	rjmp	.+30     	; 0x134 <SEVEN_SEG_write+0xa2>
		case 3: E2;break;
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	2b 7f       	andi	r18, 0xFB	; 251
 11a:	2b bb       	out	0x1b, r18	; 27
 11c:	0b c0       	rjmp	.+22     	; 0x134 <SEVEN_SEG_write+0xa2>
		case 4: E3;break;
 11e:	2b b3       	in	r18, 0x1b	; 27
 120:	27 7f       	andi	r18, 0xF7	; 247
 122:	2b bb       	out	0x1b, r18	; 27
 124:	07 c0       	rjmp	.+14     	; 0x134 <SEVEN_SEG_write+0xa2>
		case 5: E4;break;
 126:	2b b3       	in	r18, 0x1b	; 27
 128:	2f 7e       	andi	r18, 0xEF	; 239
 12a:	2b bb       	out	0x1b, r18	; 27
 12c:	03 c0       	rjmp	.+6      	; 0x134 <SEVEN_SEG_write+0xa2>
		case 6: E5;break;
 12e:	2b b3       	in	r18, 0x1b	; 27
 130:	2f 7d       	andi	r18, 0xDF	; 223
 132:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2a e1       	ldi	r18, 0x1A	; 26
 136:	2a 95       	dec	r18
 138:	f1 f7       	brne	.-4      	; 0x136 <SEVEN_SEG_write+0xa4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <SEVEN_SEG_write+0xaa>
		default:;break;
	}
	
	_delay_us(5);
	RESET;
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	2b bb       	out	0x1b, r18	; 27
	PORT_WRITE = ss_arr[digit_2];
 140:	e9 2f       	mov	r30, r25
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e0 5a       	subi	r30, 0xA0	; 160
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	90 81       	ld	r25, Z
 14a:	95 bb       	out	0x15, r25	; 21
	switch (seg2){
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	a1 f0       	breq	.+40     	; 0x178 <SEVEN_SEG_write+0xe6>
 150:	28 f4       	brcc	.+10     	; 0x15c <SEVEN_SEG_write+0xca>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	49 f0       	breq	.+18     	; 0x168 <SEVEN_SEG_write+0xd6>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	59 f0       	breq	.+22     	; 0x170 <SEVEN_SEG_write+0xde>
 15a:	1d c0       	rjmp	.+58     	; 0x196 <SEVEN_SEG_write+0x104>
 15c:	85 30       	cpi	r24, 0x05	; 5
 15e:	a1 f0       	breq	.+40     	; 0x188 <SEVEN_SEG_write+0xf6>
 160:	78 f0       	brcs	.+30     	; 0x180 <SEVEN_SEG_write+0xee>
 162:	86 30       	cpi	r24, 0x06	; 6
 164:	a9 f0       	breq	.+42     	; 0x190 <SEVEN_SEG_write+0xfe>
 166:	17 c0       	rjmp	.+46     	; 0x196 <SEVEN_SEG_write+0x104>
		case 1: E0;break;
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	13 c0       	rjmp	.+38     	; 0x196 <SEVEN_SEG_write+0x104>
		case 2: E1;break;
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	8b bb       	out	0x1b, r24	; 27
 176:	0f c0       	rjmp	.+30     	; 0x196 <SEVEN_SEG_write+0x104>
		case 3: E2;break;
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	0b c0       	rjmp	.+22     	; 0x196 <SEVEN_SEG_write+0x104>
		case 4: E3;break;
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	8b bb       	out	0x1b, r24	; 27
 186:	07 c0       	rjmp	.+14     	; 0x196 <SEVEN_SEG_write+0x104>
		case 5: E4;break;
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	8f 7e       	andi	r24, 0xEF	; 239
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	03 c0       	rjmp	.+6      	; 0x196 <SEVEN_SEG_write+0x104>
		case 6: E5;break;
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	8b bb       	out	0x1b, r24	; 27
 196:	8a e1       	ldi	r24, 0x1A	; 26
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <SEVEN_SEG_write+0x106>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <SEVEN_SEG_write+0x10c>
		default:;break;
	}
	_delay_us(5);
	RESET;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret

000001a4 <__vector_1>:
		SETBIT(MCUCR, 3);
	}
}


ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	INT0_vect_isr();
 1c6:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <INT0_vect_isr>
 1ca:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <INT0_vect_isr+0x1>
 1ce:	09 95       	icall
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_2>:

ISR(INT1_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	INT1_vect_isr();
 214:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <INT1_vect_isr>
 218:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <INT1_vect_isr+0x1>
 21c:	09 95       	icall
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <KEYPAD_init>:
* Purpose      : Configure LCD port
* Parameters   : void
* Return value :void
**************************************************************************/
void KEYPAD_init(void){
	INIT_KEYPAD_PIN
 240:	80 ef       	ldi	r24, 0xF0	; 240
 242:	81 bb       	out	0x11, r24	; 17
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	82 bb       	out	0x12, r24	; 18
 248:	08 95       	ret

0000024a <LCD_write_command>:
		}else{
			(*pos) += 0x40;
		}
	    while (x == SHIFT_DOWN);
	}
}
 24a:	98 b3       	in	r25, 0x18	; 24
 24c:	97 7f       	andi	r25, 0xF7	; 247
 24e:	98 bb       	out	0x18, r25	; 24
 250:	88 23       	and	r24, r24
 252:	24 f4       	brge	.+8      	; 0x25c <LCD_write_command+0x12>
 254:	98 b3       	in	r25, 0x18	; 24
 256:	90 68       	ori	r25, 0x80	; 128
 258:	98 bb       	out	0x18, r25	; 24
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCD_write_command+0x18>
 25c:	98 b3       	in	r25, 0x18	; 24
 25e:	9f 77       	andi	r25, 0x7F	; 127
 260:	98 bb       	out	0x18, r25	; 24
 262:	86 ff       	sbrs	r24, 6
 264:	04 c0       	rjmp	.+8      	; 0x26e <LCD_write_command+0x24>
 266:	98 b3       	in	r25, 0x18	; 24
 268:	90 64       	ori	r25, 0x40	; 64
 26a:	98 bb       	out	0x18, r25	; 24
 26c:	03 c0       	rjmp	.+6      	; 0x274 <LCD_write_command+0x2a>
 26e:	98 b3       	in	r25, 0x18	; 24
 270:	9f 7b       	andi	r25, 0xBF	; 191
 272:	98 bb       	out	0x18, r25	; 24
 274:	85 ff       	sbrs	r24, 5
 276:	04 c0       	rjmp	.+8      	; 0x280 <LCD_write_command+0x36>
 278:	98 b3       	in	r25, 0x18	; 24
 27a:	90 62       	ori	r25, 0x20	; 32
 27c:	98 bb       	out	0x18, r25	; 24
 27e:	03 c0       	rjmp	.+6      	; 0x286 <LCD_write_command+0x3c>
 280:	98 b3       	in	r25, 0x18	; 24
 282:	9f 7d       	andi	r25, 0xDF	; 223
 284:	98 bb       	out	0x18, r25	; 24
 286:	84 ff       	sbrs	r24, 4
 288:	04 c0       	rjmp	.+8      	; 0x292 <LCD_write_command+0x48>
 28a:	98 b3       	in	r25, 0x18	; 24
 28c:	90 61       	ori	r25, 0x10	; 16
 28e:	98 bb       	out	0x18, r25	; 24
 290:	03 c0       	rjmp	.+6      	; 0x298 <LCD_write_command+0x4e>
 292:	98 b3       	in	r25, 0x18	; 24
 294:	9f 7e       	andi	r25, 0xEF	; 239
 296:	98 bb       	out	0x18, r25	; 24
 298:	98 b3       	in	r25, 0x18	; 24
 29a:	92 60       	ori	r25, 0x02	; 2
 29c:	98 bb       	out	0x18, r25	; 24
 29e:	ef e9       	ldi	r30, 0x9F	; 159
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_write_command+0x58>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_write_command+0x5e>
 2a8:	00 00       	nop
 2aa:	98 b3       	in	r25, 0x18	; 24
 2ac:	9d 7f       	andi	r25, 0xFD	; 253
 2ae:	98 bb       	out	0x18, r25	; 24
 2b0:	ef e9       	ldi	r30, 0x9F	; 159
 2b2:	ff e0       	ldi	r31, 0x0F	; 15
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_write_command+0x6a>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_write_command+0x70>
 2ba:	00 00       	nop
 2bc:	83 ff       	sbrs	r24, 3
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LCD_write_command+0x7e>
 2c0:	98 b3       	in	r25, 0x18	; 24
 2c2:	90 68       	ori	r25, 0x80	; 128
 2c4:	98 bb       	out	0x18, r25	; 24
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <LCD_write_command+0x84>
 2c8:	98 b3       	in	r25, 0x18	; 24
 2ca:	9f 77       	andi	r25, 0x7F	; 127
 2cc:	98 bb       	out	0x18, r25	; 24
 2ce:	82 ff       	sbrs	r24, 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <LCD_write_command+0x90>
 2d2:	98 b3       	in	r25, 0x18	; 24
 2d4:	90 64       	ori	r25, 0x40	; 64
 2d6:	98 bb       	out	0x18, r25	; 24
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <LCD_write_command+0x96>
 2da:	98 b3       	in	r25, 0x18	; 24
 2dc:	9f 7b       	andi	r25, 0xBF	; 191
 2de:	98 bb       	out	0x18, r25	; 24
 2e0:	81 ff       	sbrs	r24, 1
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <LCD_write_command+0xa2>
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	90 62       	ori	r25, 0x20	; 32
 2e8:	98 bb       	out	0x18, r25	; 24
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <LCD_write_command+0xa8>
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	9f 7d       	andi	r25, 0xDF	; 223
 2f0:	98 bb       	out	0x18, r25	; 24
 2f2:	80 ff       	sbrs	r24, 0
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <LCD_write_command+0xb4>
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <LCD_write_command+0xba>
 2fe:	88 b3       	in	r24, 0x18	; 24
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	88 bb       	out	0x18, r24	; 24
 304:	88 b3       	in	r24, 0x18	; 24
 306:	82 60       	ori	r24, 0x02	; 2
 308:	88 bb       	out	0x18, r24	; 24
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_write_command+0xc4>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_write_command+0xca>
 314:	00 00       	nop
 316:	88 b3       	in	r24, 0x18	; 24
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	88 bb       	out	0x18, r24	; 24
 31c:	ef e9       	ldi	r30, 0x9F	; 159
 31e:	ff e0       	ldi	r31, 0x0F	; 15
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_write_command+0xd6>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_write_command+0xdc>
 326:	00 00       	nop
 328:	08 95       	ret

0000032a <LCD_init>:
 32a:	87 b3       	in	r24, 0x17	; 23
 32c:	8a 6f       	ori	r24, 0xFA	; 250
 32e:	87 bb       	out	0x17, r24	; 23
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 336:	8f e7       	ldi	r24, 0x7F	; 127
 338:	9e e3       	ldi	r25, 0x3E	; 62
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_init+0x10>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_init+0x16>
 340:	00 00       	nop
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 348:	8f e7       	ldi	r24, 0x7F	; 127
 34a:	9e e3       	ldi	r25, 0x3E	; 62
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_init+0x22>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_init+0x28>
 352:	00 00       	nop
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 35a:	8f e7       	ldi	r24, 0x7F	; 127
 35c:	9e e3       	ldi	r25, 0x3E	; 62
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_init+0x34>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_init+0x3a>
 364:	00 00       	nop
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 36c:	8f e7       	ldi	r24, 0x7F	; 127
 36e:	9e e3       	ldi	r25, 0x3E	; 62
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_init+0x46>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_init+0x4c>
 376:	00 00       	nop
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
 3a2:	9f ef       	ldi	r25, 0xFF	; 255
 3a4:	29 ef       	ldi	r18, 0xF9	; 249
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	20 40       	sbci	r18, 0x00	; 0
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <LCD_init+0x7e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_init+0x88>
 3b2:	00 00       	nop
 3b4:	08 95       	ret

000003b6 <LCD_write_data>:
 3b6:	98 b3       	in	r25, 0x18	; 24
 3b8:	98 60       	ori	r25, 0x08	; 8
 3ba:	98 bb       	out	0x18, r25	; 24
 3bc:	88 23       	and	r24, r24
 3be:	24 f4       	brge	.+8      	; 0x3c8 <LCD_write_data+0x12>
 3c0:	98 b3       	in	r25, 0x18	; 24
 3c2:	90 68       	ori	r25, 0x80	; 128
 3c4:	98 bb       	out	0x18, r25	; 24
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <LCD_write_data+0x18>
 3c8:	98 b3       	in	r25, 0x18	; 24
 3ca:	9f 77       	andi	r25, 0x7F	; 127
 3cc:	98 bb       	out	0x18, r25	; 24
 3ce:	86 ff       	sbrs	r24, 6
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <LCD_write_data+0x24>
 3d2:	98 b3       	in	r25, 0x18	; 24
 3d4:	90 64       	ori	r25, 0x40	; 64
 3d6:	98 bb       	out	0x18, r25	; 24
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <LCD_write_data+0x2a>
 3da:	98 b3       	in	r25, 0x18	; 24
 3dc:	9f 7b       	andi	r25, 0xBF	; 191
 3de:	98 bb       	out	0x18, r25	; 24
 3e0:	85 ff       	sbrs	r24, 5
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <LCD_write_data+0x36>
 3e4:	98 b3       	in	r25, 0x18	; 24
 3e6:	90 62       	ori	r25, 0x20	; 32
 3e8:	98 bb       	out	0x18, r25	; 24
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <LCD_write_data+0x3c>
 3ec:	98 b3       	in	r25, 0x18	; 24
 3ee:	9f 7d       	andi	r25, 0xDF	; 223
 3f0:	98 bb       	out	0x18, r25	; 24
 3f2:	84 ff       	sbrs	r24, 4
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <LCD_write_data+0x48>
 3f6:	98 b3       	in	r25, 0x18	; 24
 3f8:	90 61       	ori	r25, 0x10	; 16
 3fa:	98 bb       	out	0x18, r25	; 24
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fe:	98 b3       	in	r25, 0x18	; 24
 400:	9f 7e       	andi	r25, 0xEF	; 239
 402:	98 bb       	out	0x18, r25	; 24
 404:	98 b3       	in	r25, 0x18	; 24
 406:	92 60       	ori	r25, 0x02	; 2
 408:	98 bb       	out	0x18, r25	; 24
 40a:	ef e9       	ldi	r30, 0x9F	; 159
 40c:	ff e0       	ldi	r31, 0x0F	; 15
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	98 b3       	in	r25, 0x18	; 24
 418:	9d 7f       	andi	r25, 0xFD	; 253
 41a:	98 bb       	out	0x18, r25	; 24
 41c:	ef e9       	ldi	r30, 0x9F	; 159
 41e:	ff e0       	ldi	r31, 0x0F	; 15
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	83 ff       	sbrs	r24, 3
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42c:	98 b3       	in	r25, 0x18	; 24
 42e:	90 68       	ori	r25, 0x80	; 128
 430:	98 bb       	out	0x18, r25	; 24
 432:	03 c0       	rjmp	.+6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 434:	98 b3       	in	r25, 0x18	; 24
 436:	9f 77       	andi	r25, 0x7F	; 127
 438:	98 bb       	out	0x18, r25	; 24
 43a:	82 ff       	sbrs	r24, 2
 43c:	04 c0       	rjmp	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43e:	98 b3       	in	r25, 0x18	; 24
 440:	90 64       	ori	r25, 0x40	; 64
 442:	98 bb       	out	0x18, r25	; 24
 444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	98 b3       	in	r25, 0x18	; 24
 448:	9f 7b       	andi	r25, 0xBF	; 191
 44a:	98 bb       	out	0x18, r25	; 24
 44c:	81 ff       	sbrs	r24, 1
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 450:	98 b3       	in	r25, 0x18	; 24
 452:	90 62       	ori	r25, 0x20	; 32
 454:	98 bb       	out	0x18, r25	; 24
 456:	03 c0       	rjmp	.+6      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 458:	98 b3       	in	r25, 0x18	; 24
 45a:	9f 7d       	andi	r25, 0xDF	; 223
 45c:	98 bb       	out	0x18, r25	; 24
 45e:	80 ff       	sbrs	r24, 0
 460:	04 c0       	rjmp	.+8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 462:	88 b3       	in	r24, 0x18	; 24
 464:	80 61       	ori	r24, 0x10	; 16
 466:	88 bb       	out	0x18, r24	; 24
 468:	03 c0       	rjmp	.+6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46a:	88 b3       	in	r24, 0x18	; 24
 46c:	8f 7e       	andi	r24, 0xEF	; 239
 46e:	88 bb       	out	0x18, r24	; 24
 470:	88 b3       	in	r24, 0x18	; 24
 472:	82 60       	ori	r24, 0x02	; 2
 474:	88 bb       	out	0x18, r24	; 24
 476:	8f e9       	ldi	r24, 0x9F	; 159
 478:	9f e0       	ldi	r25, 0x0F	; 15
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
 482:	88 b3       	in	r24, 0x18	; 24
 484:	8d 7f       	andi	r24, 0xFD	; 253
 486:	88 bb       	out	0x18, r24	; 24
 488:	ef e9       	ldi	r30, 0x9F	; 159
 48a:	ff e0       	ldi	r31, 0x0F	; 15
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	08 95       	ret

00000496 <LCD_write_num>:
* Purpose      : write number
* Parameters   : num: decimal number 0 -->255
* Return value : void
**************************************************************************/

void LCD_write_num(uint32_t num){
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	2a 97       	sbiw	r28, 0x0a	; 10
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t arr_num[10];
	
	if(num==0){
 4ac:	61 15       	cp	r22, r1
 4ae:	71 05       	cpc	r23, r1
 4b0:	81 05       	cpc	r24, r1
 4b2:	91 05       	cpc	r25, r1
 4b4:	d1 f4       	brne	.+52     	; 0x4ea <LCD_write_num+0x54>
		LCD_write_data('0');
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_write_data>
 4bc:	2c c0       	rjmp	.+88     	; 0x516 <LCD_write_num+0x80>
		return;	// get out of function no return value needed for void functions
	}
	
	for(i = 0 ;num != 0 ; i++){
		arr_num[i] = num % 10 + 48;
 4be:	2a e0       	ldi	r18, 0x0A	; 10
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	0e 94 87 03 	call	0x70e	; 0x70e <__udivmodsi4>
 4ca:	e1 e0       	ldi	r30, 0x01	; 1
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	e1 0f       	add	r30, r17
 4d4:	f1 1d       	adc	r31, r1
 4d6:	17 fd       	sbrc	r17, 7
 4d8:	fa 95       	dec	r31
 4da:	60 5d       	subi	r22, 0xD0	; 208
 4dc:	60 83       	st	Z, r22
		num /= 10;
 4de:	62 2f       	mov	r22, r18
 4e0:	73 2f       	mov	r23, r19
 4e2:	84 2f       	mov	r24, r20
 4e4:	95 2f       	mov	r25, r21
	if(num==0){
		LCD_write_data('0');
		return;	// get out of function no return value needed for void functions
	}
	
	for(i = 0 ;num != 0 ; i++){
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <LCD_write_num+0x56>
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	61 15       	cp	r22, r1
 4ee:	71 05       	cpc	r23, r1
 4f0:	81 05       	cpc	r24, r1
 4f2:	91 05       	cpc	r25, r1
 4f4:	21 f7       	brne	.-56     	; 0x4be <LCD_write_num+0x28>
		arr_num[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 4f6:	11 50       	subi	r17, 0x01	; 1
	while(i >= 0){
 4f8:	0c c0       	rjmp	.+24     	; 0x512 <LCD_write_num+0x7c>
		LCD_write_data(arr_num[i]);
 4fa:	e1 e0       	ldi	r30, 0x01	; 1
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ec 0f       	add	r30, r28
 500:	fd 1f       	adc	r31, r29
 502:	e1 0f       	add	r30, r17
 504:	f1 1d       	adc	r31, r1
 506:	17 fd       	sbrc	r17, 7
 508:	fa 95       	dec	r31
 50a:	80 81       	ld	r24, Z
 50c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_write_data>
		i--;
 510:	11 50       	subi	r17, 0x01	; 1
	for(i = 0 ;num != 0 ; i++){
		arr_num[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while(i >= 0){
 512:	11 23       	and	r17, r17
 514:	94 f7       	brge	.-28     	; 0x4fa <LCD_write_num+0x64>
		LCD_write_data(arr_num[i]);
		i--;
	}
}
 516:	2a 96       	adiw	r28, 0x0a	; 10
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <comp_isr>:
			}
    }
}
void comp_isr(){
	static uint32_t i = 0;
	i++;
 52a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 52e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 532:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <__data_end+0x2>
 536:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <__data_end+0x3>
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	a1 1d       	adc	r26, r1
 53e:	b1 1d       	adc	r27, r1
 540:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 544:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 548:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 54c:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
	if(i == 125){
 550:	8d 37       	cpi	r24, 0x7D	; 125
 552:	91 05       	cpc	r25, r1
 554:	a1 05       	cpc	r26, r1
 556:	b1 05       	cpc	r27, r1
 558:	69 f4       	brne	.+26     	; 0x574 <comp_isr+0x4a>
		i = 0;
 55a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 55e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 562:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end+0x2>
 566:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x3>
		count_S++;	
 56a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <count_S>
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <count_S>
 574:	08 95       	ret

00000576 <main>:


int main(void)
{	
	uint8_t num = 1;
	KEYPAD_init();
 576:	0e 94 20 01 	call	0x240	; 0x240 <KEYPAD_init>
	LCD_init();
 57a:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_init>
	TIME0_COMP_init(125);
 57e:	8d e7       	ldi	r24, 0x7D	; 125
 580:	0e 94 25 03 	call	0x64a	; 0x64a <TIME0_COMP_init>
	timer0_comp_isr = comp_isr;//point to isr of ovf function
 584:	85 e9       	ldi	r24, 0x95	; 149
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <timer0_comp_isr+0x1>
 58c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <timer0_comp_isr>
static void comp_isr(void);


int main(void)
{	
	uint8_t num = 1;
 590:	c1 e0       	ldi	r28, 0x01	; 1
	timer0_comp_isr = comp_isr;//point to isr of ovf function
	
    while (1) 
    {
		
			SEVEN_SEG_write(count_S,'s');
 592:	63 e7       	ldi	r22, 0x73	; 115
 594:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <count_S>
 598:	0e 94 49 00 	call	0x92	; 0x92 <SEVEN_SEG_write>
			SEVEN_SEG_write(count_M,'m');
 59c:	6d e6       	ldi	r22, 0x6D	; 109
 59e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <count_M>
 5a2:	0e 94 49 00 	call	0x92	; 0x92 <SEVEN_SEG_write>
			SEVEN_SEG_write(count_H,'h');
 5a6:	68 e6       	ldi	r22, 0x68	; 104
 5a8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <count_H>
 5ac:	0e 94 49 00 	call	0x92	; 0x92 <SEVEN_SEG_write>
			
			if(num != count_S){
 5b0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <count_S>
 5b4:	c8 17       	cp	r28, r24
 5b6:	69 f3       	breq	.-38     	; 0x592 <main+0x1c>
				LCD_write_command(0x01);
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
				LCD_write_command(0x85);
 5be:	85 e8       	ldi	r24, 0x85	; 133
 5c0:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_write_command>
				LCD_write_num(count_H);
 5c4:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <count_H>
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_write_num>
 				LCD_write_data(':');
 5d2:	8a e3       	ldi	r24, 0x3A	; 58
 5d4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_write_data>
 				LCD_write_num(count_M);
 5d8:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <count_M>
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_write_num>
 				LCD_write_data(':');
 5e6:	8a e3       	ldi	r24, 0x3A	; 58
 5e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_write_data>
 				LCD_write_num(count_S);
 5ec:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <count_S>
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_write_num>
				num = count_S;
 5fa:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <count_S>
				//if(num == 60) num = 0;
				if(count_S == 60){ count_S = 0;count_M++;}
 5fe:	cc 33       	cpi	r28, 0x3C	; 60
 600:	39 f4       	brne	.+14     	; 0x610 <main+0x9a>
 602:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <count_S>
 606:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <count_M>
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <count_M>
				if(count_M == 60){ count_M = 0;count_H++;}
 610:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <count_M>
 614:	8c 33       	cpi	r24, 0x3C	; 60
 616:	39 f4       	brne	.+14     	; 0x626 <main+0xb0>
 618:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <count_M>
 61c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <count_H>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <count_H>
				if(count_H == 60) count_H = 0;
 626:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <count_H>
 62a:	8c 33       	cpi	r24, 0x3C	; 60
 62c:	09 f0       	breq	.+2      	; 0x630 <main+0xba>
 62e:	b1 cf       	rjmp	.-158    	; 0x592 <main+0x1c>
 630:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <count_H>
 634:	ae cf       	rjmp	.-164    	; 0x592 <main+0x1c>

00000636 <__vector_3>:
		i = 0;
		count_S++;	
	}
}

ISR(INT2_vect){
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
	
}
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <TIME0_COMP_init>:
* Purpose      : used to modify the pluse width
* Parameters   : duty : 0-->100 ,DC = duty/100 -- OCR0 = (255 * DC)
* Return value : void
**************************************************************************/
void TIME0_PWM_duty(uint8_t duty){
	OCR0 = duty * 2.55;
 64a:	8c bf       	out	0x3c, r24	; 60
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	83 bf       	out	0x33, r24	; 51
 652:	83 b7       	in	r24, 0x33	; 51
 654:	84 60       	ori	r24, 0x04	; 4
 656:	83 bf       	out	0x33, r24	; 51
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	80 68       	ori	r24, 0x80	; 128
 65c:	83 bf       	out	0x33, r24	; 51
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	88 60       	ori	r24, 0x08	; 8
 662:	83 bf       	out	0x33, r24	; 51
 664:	89 b7       	in	r24, 0x39	; 57
 666:	82 60       	ori	r24, 0x02	; 2
 668:	89 bf       	out	0x39, r24	; 57
 66a:	8f b7       	in	r24, 0x3f	; 63
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	8f bf       	out	0x3f, r24	; 63
 670:	08 95       	ret

00000672 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	timer0_ovf_isr();
 694:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <timer0_ovf_isr>
 698:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <timer0_ovf_isr+0x1>
 69c:	09 95       	icall
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__vector_10>:

ISR(TIMER0_COMP_vect){
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
	timer0_comp_isr();
 6e2:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <timer0_comp_isr>
 6e6:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <timer0_comp_isr+0x1>
 6ea:	09 95       	icall
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <__udivmodsi4>:
 70e:	a1 e2       	ldi	r26, 0x21	; 33
 710:	1a 2e       	mov	r1, r26
 712:	aa 1b       	sub	r26, r26
 714:	bb 1b       	sub	r27, r27
 716:	fd 01       	movw	r30, r26
 718:	0d c0       	rjmp	.+26     	; 0x734 <__udivmodsi4_ep>

0000071a <__udivmodsi4_loop>:
 71a:	aa 1f       	adc	r26, r26
 71c:	bb 1f       	adc	r27, r27
 71e:	ee 1f       	adc	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	a2 17       	cp	r26, r18
 724:	b3 07       	cpc	r27, r19
 726:	e4 07       	cpc	r30, r20
 728:	f5 07       	cpc	r31, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__udivmodsi4_ep>
 72c:	a2 1b       	sub	r26, r18
 72e:	b3 0b       	sbc	r27, r19
 730:	e4 0b       	sbc	r30, r20
 732:	f5 0b       	sbc	r31, r21

00000734 <__udivmodsi4_ep>:
 734:	66 1f       	adc	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	1a 94       	dec	r1
 73e:	69 f7       	brne	.-38     	; 0x71a <__udivmodsi4_loop>
 740:	60 95       	com	r22
 742:	70 95       	com	r23
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	9b 01       	movw	r18, r22
 74a:	ac 01       	movw	r20, r24
 74c:	bd 01       	movw	r22, r26
 74e:	cf 01       	movw	r24, r30
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
