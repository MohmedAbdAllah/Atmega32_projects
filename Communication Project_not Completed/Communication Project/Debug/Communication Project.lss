
Communication Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000775  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006aa  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003da  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main(void)
{
    //Initialize SPI peripheral.
	SPI_init_master();
  7c:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_init_master>
	
    while (1) 
    {
		//send data to slave
		SPI_mo(12);
  80:	8c e0       	ldi	r24, 0x0C	; 12
  82:	0e 94 56 00 	call	0xac	; 0xac <SPI_mo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0xc>
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0x4>

0000008e <SPI_init_master>:
	CLRBIT(PORTB,PIND4);
	SPDR = data;
	while(READBIT(SPSR,SPIF) == 0);
	SETBIT(PORTB,PIND4);
	return SPDR;
}
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 61       	ori	r24, 0x10	; 16
  92:	87 bb       	out	0x17, r24	; 23
  94:	87 b3       	in	r24, 0x17	; 23
  96:	80 62       	ori	r24, 0x20	; 32
  98:	87 bb       	out	0x17, r24	; 23
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	87 bb       	out	0x17, r24	; 23
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	80 e5       	ldi	r24, 0x50	; 80
  a8:	8d b9       	out	0x0d, r24	; 13
  aa:	08 95       	ret

000000ac <SPI_mo>:
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	9f 7e       	andi	r25, 0xEF	; 239
  b0:	98 bb       	out	0x18, r25	; 24
  b2:	8f b9       	out	0x0f, r24	; 15
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <SPI_mo+0x8>
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <__vector_12>:
ISR(SPI_STC_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	SPI_stc_vect();
  e2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
  e6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
  ea:	09 95       	icall
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
