
Communication Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c36  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095b  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  74:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
* Parameters   : void
* Return value : void
**************************************************************************/
void ADC_init(void){
	//AVCC with external capacitor at AREF pin
	SETBIT(ADMUX,REFS0);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	//Enable ADC
	SETBIT(ADCSRA,ADEN);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 68       	ori	r24, 0x80	; 128
  86:	86 b9       	out	0x06, r24	; 6
	//freq mode 128
	SETBIT(ADCSRA,ADPS0);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS1);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	82 60       	ori	r24, 0x02	; 2
  92:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS2);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	84 60       	ori	r24, 0x04	; 4
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_read>:
**************************************************************************/
uint16_t ADC_read(uint8_t channel){
	//choose the channel
	//ADMUX = ADMUX |(channel & 0x0f);
	//Start single conversion mode
	SETBIT(ADCSRA,ADSC);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6
	//check if the conversion complete or not
	while(READBIT(ADCSRA,ADSC) == 1);
  a2:	36 99       	sbic	0x06, 6	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_read+0x6>
	//read the ADC
	return ADC;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
	
	
  aa:	08 95       	ret

000000ac <EEPROM_read>:
* Purpose      : read data from EEPROM
* Parameters   : location: address of data you want to read
* Return value :void
**************************************************************************/
uint8_t EEPROM_read(uint16_t location){
	while(READBIT(EECR,EEWE)== 1);
  ac:	e1 99       	sbic	0x1c, 1	; 28
  ae:	fe cf       	rjmp	.-4      	; 0xac <EEPROM_read>
	EEAR = location;
  b0:	9f bb       	out	0x1f, r25	; 31
  b2:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR,EERE);
  b4:	8c b3       	in	r24, 0x1c	; 28
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
  ba:	8d b3       	in	r24, 0x1d	; 29
}
  bc:	08 95       	ret

000000be <EEPROM_write>:
* Parameters   : location: address where you want to write , 
				 data    : what you want to write
* Return value :void
**************************************************************************/
void EEPROM_write(uint16_t location ,uint16_t data){
	while(READBIT(EECR,EEWE)== 1);
  be:	e1 99       	sbic	0x1c, 1	; 28
  c0:	fe cf       	rjmp	.-4      	; 0xbe <EEPROM_write>
	EEAR = location;
  c2:	9f bb       	out	0x1f, r25	; 31
  c4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  c6:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  c8:	8c b3       	in	r24, 0x1c	; 28
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	8c bb       	out	0x1c, r24	; 28
	SETBIT(EECR,EEWE);
  ce:	8c b3       	in	r24, 0x1c	; 28
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c bb       	out	0x1c, r24	; 28
  d4:	08 95       	ret

000000d6 <I2C_master_init>:
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
	while(READBIT(TWCR,TWINT) == 0);
	if(((TWSR&0xF8)==0x80)||((TWSR&0xF8)==0x90))/* Check for data received &ack returned */
		return TWDR;		/* If yes then return received data */
	else return 0;
}
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 b9       	out	0x00, r24	; 0
  da:	08 95       	ret

000000dc <I2C_master_start>:
  dc:	86 b7       	in	r24, 0x36	; 54
  de:	84 6a       	ori	r24, 0xA4	; 164
  e0:	86 bf       	out	0x36, r24	; 54
  e2:	06 b6       	in	r0, 0x36	; 54
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <I2C_master_start+0x6>
  e8:	81 b1       	in	r24, 0x01	; 1
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	88 30       	cpi	r24, 0x08	; 8
  ee:	11 f0       	breq	.+4      	; 0xf4 <I2C_master_start+0x18>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <I2C_master_addr>:
  f8:	88 0f       	add	r24, r24
  fa:	83 b9       	out	0x03, r24	; 3
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	21 f4       	brne	.+8      	; 0x108 <I2C_master_addr+0x10>
 100:	83 b1       	in	r24, 0x03	; 3
 102:	81 60       	ori	r24, 0x01	; 1
 104:	83 b9       	out	0x03, r24	; 3
 106:	03 c0       	rjmp	.+6      	; 0x10e <I2C_master_addr+0x16>
 108:	83 b1       	in	r24, 0x03	; 3
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	83 b9       	out	0x03, r24	; 3
 10e:	86 b7       	in	r24, 0x36	; 54
 110:	84 68       	ori	r24, 0x84	; 132
 112:	86 bf       	out	0x36, r24	; 54
 114:	06 b6       	in	r0, 0x36	; 54
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <I2C_master_addr+0x1c>
 11a:	81 b1       	in	r24, 0x01	; 1
 11c:	88 7f       	andi	r24, 0xF8	; 248
 11e:	80 34       	cpi	r24, 0x40	; 64
 120:	71 f0       	breq	.+28     	; 0x13e <I2C_master_addr+0x46>
 122:	81 b1       	in	r24, 0x01	; 1
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 31       	cpi	r24, 0x18	; 24
 128:	61 f0       	breq	.+24     	; 0x142 <I2C_master_addr+0x4a>
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	88 34       	cpi	r24, 0x48	; 72
 130:	51 f0       	breq	.+20     	; 0x146 <I2C_master_addr+0x4e>
 132:	81 b1       	in	r24, 0x01	; 1
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	80 32       	cpi	r24, 0x20	; 32
 138:	41 f4       	brne	.+16     	; 0x14a <I2C_master_addr+0x52>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	08 95       	ret

0000014e <I2C_master_stop>:
 14e:	86 b7       	in	r24, 0x36	; 54
 150:	84 69       	ori	r24, 0x94	; 148
 152:	86 bf       	out	0x36, r24	; 54
 154:	06 b6       	in	r0, 0x36	; 54
 156:	04 fc       	sbrc	r0, 4
 158:	fd cf       	rjmp	.-6      	; 0x154 <I2C_master_stop+0x6>
 15a:	08 95       	ret

0000015c <I2C_slave_write>:
* Purpose      : send data
* Parameters   : data:transmit data
* Return value : void
**************************************************************************/
uint8_t I2C_slave_write(uint8_t data){
	TWDR = data;
 15c:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 15e:	84 ec       	ldi	r24, 0xC4	; 196
 160:	86 bf       	out	0x36, r24	; 54
	while(READBIT(TWCR,TWINT) == 0);
 162:	06 b6       	in	r0, 0x36	; 54
 164:	07 fe       	sbrs	r0, 7
 166:	fd cf       	rjmp	.-6      	; 0x162 <I2C_slave_write+0x6>
	if((TWSR&0xF8)==0xB8)		/* Check for data transmitted &ack received */
 168:	81 b1       	in	r24, 0x01	; 1
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	88 3b       	cpi	r24, 0xB8	; 184
 16e:	51 f0       	breq	.+20     	; 0x184 <I2C_slave_write+0x28>
    	return 0;			/* Return 0 to indicate ack received */
    if((TWSR&0xF8)==0xC0)		/* Check for data transmitted &nack received */
 170:	81 b1       	in	r24, 0x01	; 1
 172:	88 7f       	andi	r24, 0xF8	; 248
 174:	80 3c       	cpi	r24, 0xC0	; 192
 176:	41 f0       	breq	.+16     	; 0x188 <I2C_slave_write+0x2c>
    	return 1;			/* Return 1 to indicate nack received */
	if((TWSR&0xF8)==0xC8)   /* Last byte transmitted with ack received */
 178:	81 b1       	in	r24, 0x01	; 1
 17a:	88 7f       	andi	r24, 0xF8	; 248
 17c:	88 3c       	cpi	r24, 0xC8	; 200
 17e:	31 f4       	brne	.+12     	; 0x18c <I2C_slave_write+0x30>
		return 2;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	08 95       	ret
uint8_t I2C_slave_write(uint8_t data){
	TWDR = data;
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);
	while(READBIT(TWCR,TWINT) == 0);
	if((TWSR&0xF8)==0xB8)		/* Check for data transmitted &ack received */
    	return 0;			/* Return 0 to indicate ack received */
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
    if((TWSR&0xF8)==0xC0)		/* Check for data transmitted &nack received */
    	return 1;			/* Return 1 to indicate nack received */
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	08 95       	ret
	if((TWSR&0xF8)==0xC8)   /* Last byte transmitted with ack received */
		return 2;
    else
    	return 3;
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	08 95       	ret

00000190 <main>:

#include "MASTER.h"


int main(void)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <main+0x6>
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(DDRA,PINA0);
 19a:	8a b3       	in	r24, 0x1a	; 26
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8a bb       	out	0x1a, r24	; 26
	SETBIT(PORTA,PINA0);
 1a0:	8b b3       	in	r24, 0x1b	; 27
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	8b bb       	out	0x1b, r24	; 27
	//Initialize SPI peripheral.
	SPI_init_master();
 1a6:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_init_master>
	I2C_master_init();
 1aa:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_master_init>
	ADC_init();
 1ae:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
	volatile uint8_t Speed = EEPROM_read(50);
 1b2:	82 e3       	ldi	r24, 0x32	; 50
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 56 00 	call	0xac	; 0xac <EEPROM_read>
 1ba:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t temp = 0;
 1bc:	1a 82       	std	Y+2, r1	; 0x02
    while (1) 
    {
		temp = (ADC_read(0)*100/206) + 1;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_read>
 1c4:	44 e6       	ldi	r20, 0x64	; 100
 1c6:	48 9f       	mul	r20, r24
 1c8:	90 01       	movw	r18, r0
 1ca:	49 9f       	mul	r20, r25
 1cc:	30 0d       	add	r19, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	a9 e8       	ldi	r26, 0x89	; 137
 1d2:	bf e4       	ldi	r27, 0x4F	; 79
 1d4:	0e 94 8b 01 	call	0x316	; 0x316 <__umulhisi3>
 1d8:	00 24       	eor	r0, r0
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	00 1c       	adc	r0, r0
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	00 1c       	adc	r0, r0
 1e6:	89 2f       	mov	r24, r25
 1e8:	90 2d       	mov	r25, r0
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	8a 83       	std	Y+2, r24	; 0x02
	
		//send data to slave
		if((temp > 35)&&(temp <= 50)){
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	84 32       	cpi	r24, 0x24	; 36
 1f2:	e8 f0       	brcs	.+58     	; 0x22e <main+0x9e>
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	83 33       	cpi	r24, 0x33	; 51
 1f8:	d0 f4       	brcc	.+52     	; 0x22e <main+0x9e>
			Speed = (((temp-35) * 50)/15) + 50;;
 1fa:	2a 81       	ldd	r18, Y+2	; 0x02
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	23 52       	subi	r18, 0x23	; 35
 200:	31 09       	sbc	r19, r1
 202:	42 e3       	ldi	r20, 0x32	; 50
 204:	42 9f       	mul	r20, r18
 206:	c0 01       	movw	r24, r0
 208:	43 9f       	mul	r20, r19
 20a:	90 0d       	add	r25, r0
 20c:	11 24       	eor	r1, r1
 20e:	6f e0       	ldi	r22, 0x0F	; 15
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 77 01 	call	0x2ee	; 0x2ee <__divmodhi4>
 216:	6e 5c       	subi	r22, 0xCE	; 206
 218:	69 83       	std	Y+1, r22	; 0x01
			EEPROM_write(50,Speed);
 21a:	69 81       	ldd	r22, Y+1	; 0x01
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_write>
			SPI_mo(Speed);
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_mo>
 22c:	0e c0       	rjmp	.+28     	; 0x24a <main+0xba>
		}else if(temp > 50){
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	83 33       	cpi	r24, 0x33	; 51
 232:	58 f0       	brcs	.+22     	; 0x24a <main+0xba>

			I2C_master_start();
 234:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_master_start>
			I2C_master_addr(50,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	82 e3       	ldi	r24, 0x32	; 50
 23c:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_master_addr>
			I2C_slave_write(0xFF);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_slave_write>
			I2C_master_stop();
 246:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_master_stop>
			//_delay_ms(400);
		}
		I2C_master_start();
 24a:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_master_start>
		I2C_master_addr(50,0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	82 e3       	ldi	r24, 0x32	; 50
 252:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_master_addr>
		I2C_slave_write(0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_slave_write>
		I2C_master_stop();
 25c:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_master_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0xd4>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0xda>
 26a:	00 00       	nop
 26c:	a8 cf       	rjmp	.-176    	; 0x1be <main+0x2e>

0000026e <SPI_init_master>:
	CLRBIT(PORTB,PIND4);
	SPDR = data;
	while(READBIT(SPSR,SPIF) == 0);
	SETBIT(PORTB,PIND4);
	return SPDR;
}
 26e:	87 b3       	in	r24, 0x17	; 23
 270:	80 61       	ori	r24, 0x10	; 16
 272:	87 bb       	out	0x17, r24	; 23
 274:	87 b3       	in	r24, 0x17	; 23
 276:	80 62       	ori	r24, 0x20	; 32
 278:	87 bb       	out	0x17, r24	; 23
 27a:	87 b3       	in	r24, 0x17	; 23
 27c:	8f 7b       	andi	r24, 0xBF	; 191
 27e:	87 bb       	out	0x17, r24	; 23
 280:	87 b3       	in	r24, 0x17	; 23
 282:	80 68       	ori	r24, 0x80	; 128
 284:	87 bb       	out	0x17, r24	; 23
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	8d b9       	out	0x0d, r24	; 13
 28a:	08 95       	ret

0000028c <SPI_mo>:
 28c:	98 b3       	in	r25, 0x18	; 24
 28e:	9f 7e       	andi	r25, 0xEF	; 239
 290:	98 bb       	out	0x18, r25	; 24
 292:	8f b9       	out	0x0f, r24	; 15
 294:	77 9b       	sbis	0x0e, 7	; 14
 296:	fe cf       	rjmp	.-4      	; 0x294 <SPI_mo+0x8>
 298:	88 b3       	in	r24, 0x18	; 24
 29a:	80 61       	ori	r24, 0x10	; 16
 29c:	88 bb       	out	0x18, r24	; 24
 29e:	08 95       	ret

000002a0 <__vector_12>:
ISR(SPI_STC_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	SPI_stc_vect();
 2c2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	09 95       	icall
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__divmodhi4>:
 2ee:	97 fb       	bst	r25, 7
 2f0:	07 2e       	mov	r0, r23
 2f2:	16 f4       	brtc	.+4      	; 0x2f8 <__divmodhi4+0xa>
 2f4:	00 94       	com	r0
 2f6:	07 d0       	rcall	.+14     	; 0x306 <__divmodhi4_neg1>
 2f8:	77 fd       	sbrc	r23, 7
 2fa:	09 d0       	rcall	.+18     	; 0x30e <__divmodhi4_neg2>
 2fc:	0e 94 9a 01 	call	0x334	; 0x334 <__udivmodhi4>
 300:	07 fc       	sbrc	r0, 7
 302:	05 d0       	rcall	.+10     	; 0x30e <__divmodhi4_neg2>
 304:	3e f4       	brtc	.+14     	; 0x314 <__divmodhi4_exit>

00000306 <__divmodhi4_neg1>:
 306:	90 95       	com	r25
 308:	81 95       	neg	r24
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	08 95       	ret

0000030e <__divmodhi4_neg2>:
 30e:	70 95       	com	r23
 310:	61 95       	neg	r22
 312:	7f 4f       	sbci	r23, 0xFF	; 255

00000314 <__divmodhi4_exit>:
 314:	08 95       	ret

00000316 <__umulhisi3>:
 316:	a2 9f       	mul	r26, r18
 318:	b0 01       	movw	r22, r0
 31a:	b3 9f       	mul	r27, r19
 31c:	c0 01       	movw	r24, r0
 31e:	a3 9f       	mul	r26, r19
 320:	70 0d       	add	r23, r0
 322:	81 1d       	adc	r24, r1
 324:	11 24       	eor	r1, r1
 326:	91 1d       	adc	r25, r1
 328:	b2 9f       	mul	r27, r18
 32a:	70 0d       	add	r23, r0
 32c:	81 1d       	adc	r24, r1
 32e:	11 24       	eor	r1, r1
 330:	91 1d       	adc	r25, r1
 332:	08 95       	ret

00000334 <__udivmodhi4>:
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	51 e1       	ldi	r21, 0x11	; 17
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__udivmodhi4_ep>

0000033c <__udivmodhi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 17       	cp	r26, r22
 342:	b7 07       	cpc	r27, r23
 344:	10 f0       	brcs	.+4      	; 0x34a <__udivmodhi4_ep>
 346:	a6 1b       	sub	r26, r22
 348:	b7 0b       	sbc	r27, r23

0000034a <__udivmodhi4_ep>:
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	5a 95       	dec	r21
 350:	a9 f7       	brne	.-22     	; 0x33c <__udivmodhi4_loop>
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
