
Atmega32_WD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006da  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a0  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	SETBIT(DDRA,PINA7);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	8a bb       	out	0x1a, r24	; 26
	
	
	
    while (1) 
    {
		WDT_on(3);
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	0e 94 4b 00 	call	0x96	; 0x96 <WDT_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	85 ed       	ldi	r24, 0xD5	; 213
  7c:	96 e0       	ldi	r25, 0x06	; 6
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		_delay_ms(140);
		WDT_off();
  8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <WDT_off>
		TOGBIT(PORTA,PINA7);
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	80 58       	subi	r24, 0x80	; 128
  92:	8b bb       	out	0x1b, r24	; 27
  94:	ee cf       	rjmp	.-36     	; 0x72 <main+0x6>

00000096 <WDT_on>:
* Parameters   : time mode
* Return value : void
**************************************************************************/
void WDT_on(uint8_t time_mode){
	//choose delay time
	if(time_mode == 0) WDTCR|0;
  96:	81 11       	cpse	r24, r1
  98:	02 c0       	rjmp	.+4      	; 0x9e <WDT_on+0x8>
  9a:	81 b5       	in	r24, 0x21	; 33
  9c:	29 c0       	rjmp	.+82     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 1) WDTCR|=1;
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	21 f4       	brne	.+8      	; 0xaa <WDT_on+0x14>
  a2:	81 b5       	in	r24, 0x21	; 33
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	81 bd       	out	0x21, r24	; 33
  a8:	23 c0       	rjmp	.+70     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 2) WDTCR|=2;
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	21 f4       	brne	.+8      	; 0xb6 <WDT_on+0x20>
  ae:	81 b5       	in	r24, 0x21	; 33
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	81 bd       	out	0x21, r24	; 33
  b4:	1d c0       	rjmp	.+58     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 3) WDTCR|=3;
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	21 f4       	brne	.+8      	; 0xc2 <WDT_on+0x2c>
  ba:	81 b5       	in	r24, 0x21	; 33
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	81 bd       	out	0x21, r24	; 33
  c0:	17 c0       	rjmp	.+46     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 4) WDTCR|=4;
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	21 f4       	brne	.+8      	; 0xce <WDT_on+0x38>
  c6:	81 b5       	in	r24, 0x21	; 33
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	81 bd       	out	0x21, r24	; 33
  cc:	11 c0       	rjmp	.+34     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 5) WDTCR|=5;
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	21 f4       	brne	.+8      	; 0xda <WDT_on+0x44>
  d2:	81 b5       	in	r24, 0x21	; 33
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	81 bd       	out	0x21, r24	; 33
  d8:	0b c0       	rjmp	.+22     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 6) WDTCR|=6;
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	21 f4       	brne	.+8      	; 0xe6 <WDT_on+0x50>
  de:	81 b5       	in	r24, 0x21	; 33
  e0:	86 60       	ori	r24, 0x06	; 6
  e2:	81 bd       	out	0x21, r24	; 33
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <WDT_on+0x5a>
	else if(time_mode == 7) WDTCR|=7;
  e6:	87 30       	cpi	r24, 0x07	; 7
  e8:	19 f4       	brne	.+6      	; 0xf0 <WDT_on+0x5a>
  ea:	81 b5       	in	r24, 0x21	; 33
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	81 bd       	out	0x21, r24	; 33
	
	//enable watch dog timer
	SETBIT(WDTCR,WDE);	
  f0:	81 b5       	in	r24, 0x21	; 33
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	81 bd       	out	0x21, r24	; 33
  f6:	08 95       	ret

000000f8 <WDT_off>:
* Parameters   : void
* Return value : void
**************************************************************************/
void WDT_off(void){
	//stop watch dog timer
	WDTCR |= 1<<WDE | 1<<WDTOE;
  f8:	81 b5       	in	r24, 0x21	; 33
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	81 bd       	out	0x21, r24	; 33
	CLRBIT(WDTCR,WDE);
  fe:	81 b5       	in	r24, 0x21	; 33
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	81 bd       	out	0x21, r24	; 33
 104:	08 95       	ret

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
