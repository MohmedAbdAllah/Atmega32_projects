
Atmega32_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef9  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7f  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000897  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000037a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_10>
  2c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 56 00 	call	0xac	; 0xac <main>
  74:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
* Parameters   : void
* Return value : void
**************************************************************************/
void ADC_init(void){
	//AVCC with external capacitor at AREF pin
	SETBIT(ADMUX,REFS0);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	//Enable ADC
	SETBIT(ADCSRA,ADEN);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 68       	ori	r24, 0x80	; 128
  86:	86 b9       	out	0x06, r24	; 6
	//freq mode 128
	SETBIT(ADCSRA,ADPS0);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS1);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	82 60       	ori	r24, 0x02	; 2
  92:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS2);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	84 60       	ori	r24, 0x04	; 4
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_read>:
* Parameters   : void
* Return value : converting value from ADC register
**************************************************************************/
uint16_t ADC_read(void){
	//Start single conversion mode
	SETBIT(ADCSRA,ADSC);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6
	//check if the conversion complete or not
	while(READBIT(ADCSRA,ADSC) == 1);
  a2:	36 99       	sbic	0x06, 6	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_read+0x6>
	//read the ADC
	return ADC;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
	
	
  aa:	08 95       	ret

000000ac <main>:
#include "LCD.h"


int main(void)
{
    LCD_init();
  ac:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_init>
	ADC_init();
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
	
    while (1) 
    {
		LCD_write_command(0x80);
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
		LCD_write_command(0x01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
		LCD_write_num((ADC_read()*100/206)+1);
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_read>
  c4:	44 e6       	ldi	r20, 0x64	; 100
  c6:	48 9f       	mul	r20, r24
  c8:	90 01       	movw	r18, r0
  ca:	49 9f       	mul	r20, r25
  cc:	30 0d       	add	r19, r0
  ce:	11 24       	eor	r1, r1
  d0:	a9 e8       	ldi	r26, 0x89	; 137
  d2:	bf e4       	ldi	r27, 0x4F	; 79
  d4:	0e 94 66 02 	call	0x4cc	; 0x4cc <__umulhisi3>
  d8:	00 24       	eor	r0, r0
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	00 1c       	adc	r0, r0
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	00 1c       	adc	r0, r0
  e6:	89 2f       	mov	r24, r25
  e8:	90 2d       	mov	r25, r0
  ea:	bc 01       	movw	r22, r24
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_write_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x52>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x5c>
 108:	00 00       	nop
 10a:	d4 cf       	rjmp	.-88     	; 0xb4 <main+0x8>

0000010c <LCD_write_command>:
		}else{
			(*pos) += 0x40;
		}
	    while (x == SHIFT_DOWN);
	}
}
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	97 7f       	andi	r25, 0xF7	; 247
 110:	98 bb       	out	0x18, r25	; 24
 112:	88 23       	and	r24, r24
 114:	24 f4       	brge	.+8      	; 0x11e <LCD_write_command+0x12>
 116:	98 b3       	in	r25, 0x18	; 24
 118:	90 68       	ori	r25, 0x80	; 128
 11a:	98 bb       	out	0x18, r25	; 24
 11c:	03 c0       	rjmp	.+6      	; 0x124 <LCD_write_command+0x18>
 11e:	98 b3       	in	r25, 0x18	; 24
 120:	9f 77       	andi	r25, 0x7F	; 127
 122:	98 bb       	out	0x18, r25	; 24
 124:	86 ff       	sbrs	r24, 6
 126:	04 c0       	rjmp	.+8      	; 0x130 <LCD_write_command+0x24>
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	90 64       	ori	r25, 0x40	; 64
 12c:	98 bb       	out	0x18, r25	; 24
 12e:	03 c0       	rjmp	.+6      	; 0x136 <LCD_write_command+0x2a>
 130:	98 b3       	in	r25, 0x18	; 24
 132:	9f 7b       	andi	r25, 0xBF	; 191
 134:	98 bb       	out	0x18, r25	; 24
 136:	85 ff       	sbrs	r24, 5
 138:	04 c0       	rjmp	.+8      	; 0x142 <LCD_write_command+0x36>
 13a:	98 b3       	in	r25, 0x18	; 24
 13c:	90 62       	ori	r25, 0x20	; 32
 13e:	98 bb       	out	0x18, r25	; 24
 140:	03 c0       	rjmp	.+6      	; 0x148 <LCD_write_command+0x3c>
 142:	98 b3       	in	r25, 0x18	; 24
 144:	9f 7d       	andi	r25, 0xDF	; 223
 146:	98 bb       	out	0x18, r25	; 24
 148:	84 ff       	sbrs	r24, 4
 14a:	04 c0       	rjmp	.+8      	; 0x154 <LCD_write_command+0x48>
 14c:	98 b3       	in	r25, 0x18	; 24
 14e:	90 61       	ori	r25, 0x10	; 16
 150:	98 bb       	out	0x18, r25	; 24
 152:	03 c0       	rjmp	.+6      	; 0x15a <LCD_write_command+0x4e>
 154:	98 b3       	in	r25, 0x18	; 24
 156:	9f 7e       	andi	r25, 0xEF	; 239
 158:	98 bb       	out	0x18, r25	; 24
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	94 60       	ori	r25, 0x04	; 4
 15e:	98 bb       	out	0x18, r25	; 24
 160:	ef e9       	ldi	r30, 0x9F	; 159
 162:	ff e0       	ldi	r31, 0x0F	; 15
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_write_command+0x58>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_write_command+0x5e>
 16a:	00 00       	nop
 16c:	98 b3       	in	r25, 0x18	; 24
 16e:	9b 7f       	andi	r25, 0xFB	; 251
 170:	98 bb       	out	0x18, r25	; 24
 172:	ef e9       	ldi	r30, 0x9F	; 159
 174:	ff e0       	ldi	r31, 0x0F	; 15
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_write_command+0x6a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_write_command+0x70>
 17c:	00 00       	nop
 17e:	83 ff       	sbrs	r24, 3
 180:	04 c0       	rjmp	.+8      	; 0x18a <LCD_write_command+0x7e>
 182:	98 b3       	in	r25, 0x18	; 24
 184:	90 68       	ori	r25, 0x80	; 128
 186:	98 bb       	out	0x18, r25	; 24
 188:	03 c0       	rjmp	.+6      	; 0x190 <LCD_write_command+0x84>
 18a:	98 b3       	in	r25, 0x18	; 24
 18c:	9f 77       	andi	r25, 0x7F	; 127
 18e:	98 bb       	out	0x18, r25	; 24
 190:	82 ff       	sbrs	r24, 2
 192:	04 c0       	rjmp	.+8      	; 0x19c <LCD_write_command+0x90>
 194:	98 b3       	in	r25, 0x18	; 24
 196:	90 64       	ori	r25, 0x40	; 64
 198:	98 bb       	out	0x18, r25	; 24
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <LCD_write_command+0x96>
 19c:	98 b3       	in	r25, 0x18	; 24
 19e:	9f 7b       	andi	r25, 0xBF	; 191
 1a0:	98 bb       	out	0x18, r25	; 24
 1a2:	81 ff       	sbrs	r24, 1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <LCD_write_command+0xa2>
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	90 62       	ori	r25, 0x20	; 32
 1aa:	98 bb       	out	0x18, r25	; 24
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <LCD_write_command+0xa8>
 1ae:	98 b3       	in	r25, 0x18	; 24
 1b0:	9f 7d       	andi	r25, 0xDF	; 223
 1b2:	98 bb       	out	0x18, r25	; 24
 1b4:	80 ff       	sbrs	r24, 0
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <LCD_write_command+0xb4>
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <LCD_write_command+0xba>
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	88 b3       	in	r24, 0x18	; 24
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	8f e9       	ldi	r24, 0x9F	; 159
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_write_command+0xc4>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_write_command+0xca>
 1d6:	00 00       	nop
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	8b 7f       	andi	r24, 0xFB	; 251
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	ef e9       	ldi	r30, 0x9F	; 159
 1e0:	ff e0       	ldi	r31, 0x0F	; 15
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_write_command+0xd6>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_write_command+0xdc>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <LCD_init>:
 1ec:	87 b3       	in	r24, 0x17	; 23
 1ee:	8c 6f       	ori	r24, 0xFC	; 252
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 1f8:	8f e7       	ldi	r24, 0x7F	; 127
 1fa:	9e e3       	ldi	r25, 0x3E	; 62
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_init+0x10>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_init+0x16>
 202:	00 00       	nop
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 20a:	8f e7       	ldi	r24, 0x7F	; 127
 20c:	9e e3       	ldi	r25, 0x3E	; 62
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_init+0x22>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_init+0x28>
 214:	00 00       	nop
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 21c:	8f e7       	ldi	r24, 0x7F	; 127
 21e:	9e e3       	ldi	r25, 0x3E	; 62
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_init+0x34>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_init+0x3a>
 226:	00 00       	nop
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 22e:	8f e7       	ldi	r24, 0x7F	; 127
 230:	9e e3       	ldi	r25, 0x3E	; 62
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_init+0x46>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_init+0x4c>
 238:	00 00       	nop
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 240:	88 e2       	ldi	r24, 0x28	; 40
 242:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 25e:	8c e0       	ldi	r24, 0x0C	; 12
 260:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_command>
 264:	9f ef       	ldi	r25, 0xFF	; 255
 266:	29 ef       	ldi	r18, 0xF9	; 249
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <LCD_init+0x7e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_init+0x88>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_write_data>:
 278:	98 b3       	in	r25, 0x18	; 24
 27a:	98 60       	ori	r25, 0x08	; 8
 27c:	98 bb       	out	0x18, r25	; 24
 27e:	88 23       	and	r24, r24
 280:	24 f4       	brge	.+8      	; 0x28a <LCD_write_data+0x12>
 282:	98 b3       	in	r25, 0x18	; 24
 284:	90 68       	ori	r25, 0x80	; 128
 286:	98 bb       	out	0x18, r25	; 24
 288:	03 c0       	rjmp	.+6      	; 0x290 <LCD_write_data+0x18>
 28a:	98 b3       	in	r25, 0x18	; 24
 28c:	9f 77       	andi	r25, 0x7F	; 127
 28e:	98 bb       	out	0x18, r25	; 24
 290:	86 ff       	sbrs	r24, 6
 292:	04 c0       	rjmp	.+8      	; 0x29c <LCD_write_data+0x24>
 294:	98 b3       	in	r25, 0x18	; 24
 296:	90 64       	ori	r25, 0x40	; 64
 298:	98 bb       	out	0x18, r25	; 24
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCD_write_data+0x2a>
 29c:	98 b3       	in	r25, 0x18	; 24
 29e:	9f 7b       	andi	r25, 0xBF	; 191
 2a0:	98 bb       	out	0x18, r25	; 24
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <LCD_write_data+0x36>
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	90 62       	ori	r25, 0x20	; 32
 2aa:	98 bb       	out	0x18, r25	; 24
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <LCD_write_data+0x3c>
 2ae:	98 b3       	in	r25, 0x18	; 24
 2b0:	9f 7d       	andi	r25, 0xDF	; 223
 2b2:	98 bb       	out	0x18, r25	; 24
 2b4:	84 ff       	sbrs	r24, 4
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <LCD_write_data+0x48>
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	90 61       	ori	r25, 0x10	; 16
 2bc:	98 bb       	out	0x18, r25	; 24
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <LCD_write_data+0x4e>
 2c0:	98 b3       	in	r25, 0x18	; 24
 2c2:	9f 7e       	andi	r25, 0xEF	; 239
 2c4:	98 bb       	out	0x18, r25	; 24
 2c6:	98 b3       	in	r25, 0x18	; 24
 2c8:	94 60       	ori	r25, 0x04	; 4
 2ca:	98 bb       	out	0x18, r25	; 24
 2cc:	ef e9       	ldi	r30, 0x9F	; 159
 2ce:	ff e0       	ldi	r31, 0x0F	; 15
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_write_data+0x58>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_write_data+0x5e>
 2d6:	00 00       	nop
 2d8:	98 b3       	in	r25, 0x18	; 24
 2da:	9b 7f       	andi	r25, 0xFB	; 251
 2dc:	98 bb       	out	0x18, r25	; 24
 2de:	ef e9       	ldi	r30, 0x9F	; 159
 2e0:	ff e0       	ldi	r31, 0x0F	; 15
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_write_data+0x6a>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_write_data+0x70>
 2e8:	00 00       	nop
 2ea:	83 ff       	sbrs	r24, 3
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <LCD_write_data+0x7e>
 2ee:	98 b3       	in	r25, 0x18	; 24
 2f0:	90 68       	ori	r25, 0x80	; 128
 2f2:	98 bb       	out	0x18, r25	; 24
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <LCD_write_data+0x84>
 2f6:	98 b3       	in	r25, 0x18	; 24
 2f8:	9f 77       	andi	r25, 0x7F	; 127
 2fa:	98 bb       	out	0x18, r25	; 24
 2fc:	82 ff       	sbrs	r24, 2
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <LCD_write_data+0x90>
 300:	98 b3       	in	r25, 0x18	; 24
 302:	90 64       	ori	r25, 0x40	; 64
 304:	98 bb       	out	0x18, r25	; 24
 306:	03 c0       	rjmp	.+6      	; 0x30e <LCD_write_data+0x96>
 308:	98 b3       	in	r25, 0x18	; 24
 30a:	9f 7b       	andi	r25, 0xBF	; 191
 30c:	98 bb       	out	0x18, r25	; 24
 30e:	81 ff       	sbrs	r24, 1
 310:	04 c0       	rjmp	.+8      	; 0x31a <LCD_write_data+0xa2>
 312:	98 b3       	in	r25, 0x18	; 24
 314:	90 62       	ori	r25, 0x20	; 32
 316:	98 bb       	out	0x18, r25	; 24
 318:	03 c0       	rjmp	.+6      	; 0x320 <LCD_write_data+0xa8>
 31a:	98 b3       	in	r25, 0x18	; 24
 31c:	9f 7d       	andi	r25, 0xDF	; 223
 31e:	98 bb       	out	0x18, r25	; 24
 320:	80 ff       	sbrs	r24, 0
 322:	04 c0       	rjmp	.+8      	; 0x32c <LCD_write_data+0xb4>
 324:	88 b3       	in	r24, 0x18	; 24
 326:	80 61       	ori	r24, 0x10	; 16
 328:	88 bb       	out	0x18, r24	; 24
 32a:	03 c0       	rjmp	.+6      	; 0x332 <LCD_write_data+0xba>
 32c:	88 b3       	in	r24, 0x18	; 24
 32e:	8f 7e       	andi	r24, 0xEF	; 239
 330:	88 bb       	out	0x18, r24	; 24
 332:	88 b3       	in	r24, 0x18	; 24
 334:	84 60       	ori	r24, 0x04	; 4
 336:	88 bb       	out	0x18, r24	; 24
 338:	8f e9       	ldi	r24, 0x9F	; 159
 33a:	9f e0       	ldi	r25, 0x0F	; 15
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_write_data+0xc4>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_write_data+0xca>
 342:	00 00       	nop
 344:	88 b3       	in	r24, 0x18	; 24
 346:	8b 7f       	andi	r24, 0xFB	; 251
 348:	88 bb       	out	0x18, r24	; 24
 34a:	ef e9       	ldi	r30, 0x9F	; 159
 34c:	ff e0       	ldi	r31, 0x0F	; 15
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_write_data+0xd6>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_write_data+0xdc>
 354:	00 00       	nop
 356:	08 95       	ret

00000358 <LCD_write_num>:
* Purpose      : write number
* Parameters   : num: decimal number 0 -->255
* Return value : void
**************************************************************************/

void LCD_write_num(uint32_t num){
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	2a 97       	sbiw	r28, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t arr_num[10];
	
	if(num==0){
 36e:	61 15       	cp	r22, r1
 370:	71 05       	cpc	r23, r1
 372:	81 05       	cpc	r24, r1
 374:	91 05       	cpc	r25, r1
 376:	d1 f4       	brne	.+52     	; 0x3ac <LCD_write_num+0x54>
		LCD_write_data('0');
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_write_data>
 37e:	2c c0       	rjmp	.+88     	; 0x3d8 <LCD_write_num+0x80>
		return;	// get out of function no return value needed for void functions
	}
	
	for(i = 0 ;num != 0 ; i++){
		arr_num[i] = num % 10 + 48;
 380:	2a e0       	ldi	r18, 0x0A	; 10
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	0e 94 44 02 	call	0x488	; 0x488 <__udivmodsi4>
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	e1 0f       	add	r30, r17
 396:	f1 1d       	adc	r31, r1
 398:	17 fd       	sbrc	r17, 7
 39a:	fa 95       	dec	r31
 39c:	60 5d       	subi	r22, 0xD0	; 208
 39e:	60 83       	st	Z, r22
		num /= 10;
 3a0:	62 2f       	mov	r22, r18
 3a2:	73 2f       	mov	r23, r19
 3a4:	84 2f       	mov	r24, r20
 3a6:	95 2f       	mov	r25, r21
	if(num==0){
		LCD_write_data('0');
		return;	// get out of function no return value needed for void functions
	}
	
	for(i = 0 ;num != 0 ; i++){
 3a8:	1f 5f       	subi	r17, 0xFF	; 255
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <LCD_write_num+0x56>
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	61 15       	cp	r22, r1
 3b0:	71 05       	cpc	r23, r1
 3b2:	81 05       	cpc	r24, r1
 3b4:	91 05       	cpc	r25, r1
 3b6:	21 f7       	brne	.-56     	; 0x380 <LCD_write_num+0x28>
		arr_num[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 3b8:	11 50       	subi	r17, 0x01	; 1
	while(i >= 0){
 3ba:	0c c0       	rjmp	.+24     	; 0x3d4 <LCD_write_num+0x7c>
		LCD_write_data(arr_num[i]);
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	e1 0f       	add	r30, r17
 3c6:	f1 1d       	adc	r31, r1
 3c8:	17 fd       	sbrc	r17, 7
 3ca:	fa 95       	dec	r31
 3cc:	80 81       	ld	r24, Z
 3ce:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_write_data>
		i--;
 3d2:	11 50       	subi	r17, 0x01	; 1
	for(i = 0 ;num != 0 ; i++){
		arr_num[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while(i >= 0){
 3d4:	11 23       	and	r17, r17
 3d6:	94 f7       	brge	.-28     	; 0x3bc <LCD_write_num+0x64>
		LCD_write_data(arr_num[i]);
		i--;
	}
}
 3d8:	2a 96       	adiw	r28, 0x0a	; 10
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	08 95       	ret

000003ec <__vector_11>:
**************************************************************************/
void TIME0_PWM_duty(uint8_t duty){
	OCR0 = duty * 2.55;
}

ISR(TIMER0_OVF_vect){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	timer0_ovf_isr();
 40e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 412:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 416:	09 95       	icall
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_10>:

ISR(TIMER0_COMP_vect){
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	timer0_comp_isr();
 45c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <timer0_comp_isr>
 460:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <timer0_comp_isr+0x1>
 464:	09 95       	icall
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__udivmodsi4>:
 488:	a1 e2       	ldi	r26, 0x21	; 33
 48a:	1a 2e       	mov	r1, r26
 48c:	aa 1b       	sub	r26, r26
 48e:	bb 1b       	sub	r27, r27
 490:	fd 01       	movw	r30, r26
 492:	0d c0       	rjmp	.+26     	; 0x4ae <__udivmodsi4_ep>

00000494 <__udivmodsi4_loop>:
 494:	aa 1f       	adc	r26, r26
 496:	bb 1f       	adc	r27, r27
 498:	ee 1f       	adc	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	a2 17       	cp	r26, r18
 49e:	b3 07       	cpc	r27, r19
 4a0:	e4 07       	cpc	r30, r20
 4a2:	f5 07       	cpc	r31, r21
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__udivmodsi4_ep>
 4a6:	a2 1b       	sub	r26, r18
 4a8:	b3 0b       	sbc	r27, r19
 4aa:	e4 0b       	sbc	r30, r20
 4ac:	f5 0b       	sbc	r31, r21

000004ae <__udivmodsi4_ep>:
 4ae:	66 1f       	adc	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	1a 94       	dec	r1
 4b8:	69 f7       	brne	.-38     	; 0x494 <__udivmodsi4_loop>
 4ba:	60 95       	com	r22
 4bc:	70 95       	com	r23
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	bd 01       	movw	r22, r26
 4c8:	cf 01       	movw	r24, r30
 4ca:	08 95       	ret

000004cc <__umulhisi3>:
 4cc:	a2 9f       	mul	r26, r18
 4ce:	b0 01       	movw	r22, r0
 4d0:	b3 9f       	mul	r27, r19
 4d2:	c0 01       	movw	r24, r0
 4d4:	a3 9f       	mul	r26, r19
 4d6:	70 0d       	add	r23, r0
 4d8:	81 1d       	adc	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	91 1d       	adc	r25, r1
 4de:	b2 9f       	mul	r27, r18
 4e0:	70 0d       	add	r23, r0
 4e2:	81 1d       	adc	r24, r1
 4e4:	11 24       	eor	r1, r1
 4e6:	91 1d       	adc	r25, r1
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
