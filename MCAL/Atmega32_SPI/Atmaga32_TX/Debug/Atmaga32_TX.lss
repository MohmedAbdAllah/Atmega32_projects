
Atmaga32_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd7  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  000011bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099d  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f7  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_write_command>:
* Return value :void
**************************************************************************/

void LCD_write_command(uint8_t com){
	
	RS(0);
  6c:	9b b3       	in	r25, 0x1b	; 27
  6e:	97 7f       	andi	r25, 0xF7	; 247
  70:	9b bb       	out	0x1b, r25	; 27
	D7(READBIT(com,7)); //com bit 7 --> D7
  72:	88 23       	and	r24, r24
  74:	24 f4       	brge	.+8      	; 0x7e <LCD_write_command+0x12>
  76:	9b b3       	in	r25, 0x1b	; 27
  78:	90 68       	ori	r25, 0x80	; 128
  7a:	9b bb       	out	0x1b, r25	; 27
  7c:	03 c0       	rjmp	.+6      	; 0x84 <LCD_write_command+0x18>
  7e:	9b b3       	in	r25, 0x1b	; 27
  80:	9f 77       	andi	r25, 0x7F	; 127
  82:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(com,6)); //com bit 6 --> D6
  84:	86 ff       	sbrs	r24, 6
  86:	04 c0       	rjmp	.+8      	; 0x90 <LCD_write_command+0x24>
  88:	9b b3       	in	r25, 0x1b	; 27
  8a:	90 64       	ori	r25, 0x40	; 64
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LCD_write_command+0x2a>
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	9f 7b       	andi	r25, 0xBF	; 191
  94:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(com,5)); //com bit 5 --> D5
  96:	85 ff       	sbrs	r24, 5
  98:	04 c0       	rjmp	.+8      	; 0xa2 <LCD_write_command+0x36>
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	90 62       	ori	r25, 0x20	; 32
  9e:	9b bb       	out	0x1b, r25	; 27
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <LCD_write_command+0x3c>
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	9f 7d       	andi	r25, 0xDF	; 223
  a6:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(com,4)); //com bit 4 --> D4
  a8:	84 ff       	sbrs	r24, 4
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <LCD_write_command+0x48>
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	90 61       	ori	r25, 0x10	; 16
  b0:	9b bb       	out	0x1b, r25	; 27
  b2:	03 c0       	rjmp	.+6      	; 0xba <LCD_write_command+0x4e>
  b4:	9b b3       	in	r25, 0x1b	; 27
  b6:	9f 7e       	andi	r25, 0xEF	; 239
  b8:	9b bb       	out	0x1b, r25	; 27
	EN(1);
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	94 60       	ori	r25, 0x04	; 4
  be:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef e9       	ldi	r30, 0x9F	; 159
  c2:	ff e0       	ldi	r31, 0x0F	; 15
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_write_command+0x58>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_write_command+0x5e>
  ca:	00 00       	nop
	_delay_ms(1);
	EN(0);
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	9b 7f       	andi	r25, 0xFB	; 251
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	ef e9       	ldi	r30, 0x9F	; 159
  d4:	ff e0       	ldi	r31, 0x0F	; 15
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_write_command+0x6a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_write_command+0x70>
  dc:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(com,3)); //com bit 3 --> D7
  de:	83 ff       	sbrs	r24, 3
  e0:	04 c0       	rjmp	.+8      	; 0xea <LCD_write_command+0x7e>
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	90 68       	ori	r25, 0x80	; 128
  e6:	9b bb       	out	0x1b, r25	; 27
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <LCD_write_command+0x84>
  ea:	9b b3       	in	r25, 0x1b	; 27
  ec:	9f 77       	andi	r25, 0x7F	; 127
  ee:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(com,2)); //com bit 2 --> D6
  f0:	82 ff       	sbrs	r24, 2
  f2:	04 c0       	rjmp	.+8      	; 0xfc <LCD_write_command+0x90>
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	90 64       	ori	r25, 0x40	; 64
  f8:	9b bb       	out	0x1b, r25	; 27
  fa:	03 c0       	rjmp	.+6      	; 0x102 <LCD_write_command+0x96>
  fc:	9b b3       	in	r25, 0x1b	; 27
  fe:	9f 7b       	andi	r25, 0xBF	; 191
 100:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(com,1)); //com bit 1 --> D5
 102:	81 ff       	sbrs	r24, 1
 104:	04 c0       	rjmp	.+8      	; 0x10e <LCD_write_command+0xa2>
 106:	9b b3       	in	r25, 0x1b	; 27
 108:	90 62       	ori	r25, 0x20	; 32
 10a:	9b bb       	out	0x1b, r25	; 27
 10c:	03 c0       	rjmp	.+6      	; 0x114 <LCD_write_command+0xa8>
 10e:	9b b3       	in	r25, 0x1b	; 27
 110:	9f 7d       	andi	r25, 0xDF	; 223
 112:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(com,0)); //com bit 0 --> D4
 114:	80 ff       	sbrs	r24, 0
 116:	04 c0       	rjmp	.+8      	; 0x120 <LCD_write_command+0xb4>
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	03 c0       	rjmp	.+6      	; 0x126 <LCD_write_command+0xba>
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_write_command+0xc4>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_write_command+0xca>
 136:	00 00       	nop
	_delay_ms(1);
	EN(0);
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	ef e9       	ldi	r30, 0x9F	; 159
 140:	ff e0       	ldi	r31, 0x0F	; 15
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_write_command+0xd6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_write_command+0xdc>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_init>:
* Parameters   : void
* Return value :void
**************************************************************************/

void LCD_init(void){
	INIT_LCD_PIN;
 14c:	8a b3       	in	r24, 0x1a	; 26
 14e:	8c 6f       	ori	r24, 0xFC	; 252
 150:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	9e e3       	ldi	r25, 0x3E	; 62
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x10>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_init+0x16>
 162:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	9e e3       	ldi	r25, 0x3E	; 62
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_init+0x22>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_init+0x28>
 174:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 17c:	8f e7       	ldi	r24, 0x7F	; 127
 17e:	9e e3       	ldi	r25, 0x3E	; 62
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_init+0x34>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_init+0x3a>
 186:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	9e e3       	ldi	r25, 0x3E	; 62
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_init+0x46>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_init+0x4c>
 198:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x28);
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x08);
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x1);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x6);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x3);
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0xc);
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	29 ef       	ldi	r18, 0xF9	; 249
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 50       	subi	r25, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <LCD_init+0x7e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_init+0x88>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <main>:
#include "LCD.h"

int main(void)
{
	uint8_t counter = 0;
	SETBIT(DDRD,PIND7);
 1d8:	81 b3       	in	r24, 0x11	; 17
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	81 bb       	out	0x11, r24	; 17
	SPI_init_master();
 1de:	0e 94 1e 01 	call	0x23c	; 0x23c <SPI_init_master>

#include "SPI.h"
#include "LCD.h"

int main(void)
{
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t counter = 0;
	SETBIT(DDRD,PIND7);
	SPI_init_master();
	while (1)
	{	
		SETBIT(PORTB, PB4);
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	88 bb       	out	0x18, r24	; 24
		CLRBIT(PORTD, PD7);
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	82 bb       	out	0x12, r24	; 18
		SPI_mo(counter++);
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	dc 0f       	add	r29, r28
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_mo>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	81 ee       	ldi	r24, 0xE1	; 225
 1fe:	94 e0       	ldi	r25, 0x04	; 4
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x28>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x32>
 20a:	00 00       	nop
		_delay_ms(100);
		CLRBIT(PORTB, PB4);
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	8f 7e       	andi	r24, 0xEF	; 239
 210:	88 bb       	out	0x18, r24	; 24
		SETBIT(PORTD, PD7);
 212:	82 b3       	in	r24, 0x12	; 18
 214:	80 68       	ori	r24, 0x80	; 128
 216:	82 bb       	out	0x12, r24	; 18
		SPI_mo(counter++);
 218:	ce 5f       	subi	r28, 0xFE	; 254
 21a:	8d 2f       	mov	r24, r29
 21c:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_mo>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	81 ee       	ldi	r24, 0xE1	; 225
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x4e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x58>
 230:	00 00       	nop
		_delay_ms(100);
		
		if(counter == 255) {counter = 0;LCD_init();}
 232:	cf 3f       	cpi	r28, 0xFF	; 255
 234:	b9 f6       	brne	.-82     	; 0x1e4 <main+0xc>
 236:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_init>
 23a:	d3 cf       	rjmp	.-90     	; 0x1e2 <main+0xa>

0000023c <SPI_init_master>:
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	87 bb       	out	0x17, r24	; 23
 242:	87 b3       	in	r24, 0x17	; 23
 244:	80 62       	ori	r24, 0x20	; 32
 246:	87 bb       	out	0x17, r24	; 23
 248:	87 b3       	in	r24, 0x17	; 23
 24a:	8f 7b       	andi	r24, 0xBF	; 191
 24c:	87 bb       	out	0x17, r24	; 23
 24e:	87 b3       	in	r24, 0x17	; 23
 250:	80 68       	ori	r24, 0x80	; 128
 252:	87 bb       	out	0x17, r24	; 23
 254:	8d b1       	in	r24, 0x0d	; 13
 256:	81 60       	ori	r24, 0x01	; 1
 258:	8d b9       	out	0x0d, r24	; 13
 25a:	8d b1       	in	r24, 0x0d	; 13
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	8d b9       	out	0x0d, r24	; 13
 260:	8e b1       	in	r24, 0x0e	; 14
 262:	81 60       	ori	r24, 0x01	; 1
 264:	8e b9       	out	0x0e, r24	; 14
 266:	8d b1       	in	r24, 0x0d	; 13
 268:	80 61       	ori	r24, 0x10	; 16
 26a:	8d b9       	out	0x0d, r24	; 13
 26c:	8d b1       	in	r24, 0x0d	; 13
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	8d b9       	out	0x0d, r24	; 13
 272:	08 95       	ret

00000274 <SPI_mo>:
 274:	8f b9       	out	0x0f, r24	; 15
 276:	77 9b       	sbis	0x0e, 7	; 14
 278:	fe cf       	rjmp	.-4      	; 0x276 <SPI_mo+0x2>
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
