
Atmaga32_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f6  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "USART.h"


int main(void)
{
	USART_init();
  6c:	0e 94 4c 00 	call	0x98	; 0x98 <USART_init>

	uint8_t x = 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		USART_tx(x++);
  72:	c1 e0       	ldi	r28, 0x01	; 1
  74:	c8 0f       	add	r28, r24
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_tx>
		if(x == 255) x =0;
  7a:	cf 3f       	cpi	r28, 0xFF	; 255
  7c:	11 f0       	breq	.+4      	; 0x82 <main+0x16>
	USART_init();

	uint8_t x = 0;
	while (1)
	{
		USART_tx(x++);
  7e:	8c 2f       	mov	r24, r28
  80:	01 c0       	rjmp	.+2      	; 0x84 <main+0x18>
		if(x == 255) x =0;
  82:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	33 ec       	ldi	r19, 0xC3	; 195
  88:	99 e0       	ldi	r25, 0x09	; 9
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	ed cf       	rjmp	.-38     	; 0x72 <main+0x6>

00000098 <USART_init>:
* Purpose      : init usart with one stop bit, no parity, baud rate 9600 and 8 bit data
* Parameters   : void
* Return value : void
*****************************************************************************/
void USART_init(){
	CLRBIT(UCSRA,U2X);
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8b b9       	out	0x0b, r24	; 11
	UBRRL = 103;
  9e:	87 e6       	ldi	r24, 0x67	; 103
  a0:	89 b9       	out	0x09, r24	; 9
	
	SETBIT(UCSRB,TXEN);
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	8a b9       	out	0x0a, r24	; 10
	SETBIT(UCSRB,RXEN);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  ae:	80 b5       	in	r24, 0x20	; 32
  b0:	86 68       	ori	r24, 0x86	; 134
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	08 95       	ret

000000b6 <USART_tx>:
* Purpose      : Send 8-bit data and make sure the data is out
* Parameters   : uint8_t  data to send
* Return value : void
*****************************************************************************/
void USART_tx(uint8_t data){
	UDR = data;
  b6:	8c b9       	out	0x0c, r24	; 12
	while(READBIT(UCSRA,TXC) == 0);
  b8:	5e 9b       	sbis	0x0b, 6	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <USART_tx+0x2>
}
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
