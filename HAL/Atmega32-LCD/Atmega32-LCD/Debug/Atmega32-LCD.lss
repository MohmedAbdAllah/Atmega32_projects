
Atmega32-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003fe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c51  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000769  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e3  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  7a:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_write_command>:
* Return value :void
**************************************************************************/

void LCD_write_command(uint8_t com){
	
	RS(0);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	97 7f       	andi	r25, 0xF7	; 247
  86:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(com,7)); //com bit 7 --> D7
  88:	88 23       	and	r24, r24
  8a:	24 f4       	brge	.+8      	; 0x94 <LCD_write_command+0x12>
  8c:	98 b3       	in	r25, 0x18	; 24
  8e:	90 68       	ori	r25, 0x80	; 128
  90:	98 bb       	out	0x18, r25	; 24
  92:	03 c0       	rjmp	.+6      	; 0x9a <LCD_write_command+0x18>
  94:	98 b3       	in	r25, 0x18	; 24
  96:	9f 77       	andi	r25, 0x7F	; 127
  98:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(com,6)); //com bit 6 --> D6
  9a:	86 ff       	sbrs	r24, 6
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <LCD_write_command+0x24>
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	90 64       	ori	r25, 0x40	; 64
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCD_write_command+0x2a>
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	9f 7b       	andi	r25, 0xBF	; 191
  aa:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(com,5)); //com bit 5 --> D5
  ac:	85 ff       	sbrs	r24, 5
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <LCD_write_command+0x36>
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	90 62       	ori	r25, 0x20	; 32
  b4:	98 bb       	out	0x18, r25	; 24
  b6:	03 c0       	rjmp	.+6      	; 0xbe <LCD_write_command+0x3c>
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	9f 7d       	andi	r25, 0xDF	; 223
  bc:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(com,4)); //com bit 4 --> D4
  be:	84 ff       	sbrs	r24, 4
  c0:	04 c0       	rjmp	.+8      	; 0xca <LCD_write_command+0x48>
  c2:	98 b3       	in	r25, 0x18	; 24
  c4:	90 61       	ori	r25, 0x10	; 16
  c6:	98 bb       	out	0x18, r25	; 24
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <LCD_write_command+0x4e>
  ca:	98 b3       	in	r25, 0x18	; 24
  cc:	9f 7e       	andi	r25, 0xEF	; 239
  ce:	98 bb       	out	0x18, r25	; 24
	EN(1);
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	94 60       	ori	r25, 0x04	; 4
  d4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	ef e9       	ldi	r30, 0x9F	; 159
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_write_command+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_write_command+0x5e>
  e0:	00 00       	nop
	_delay_ms(1);
	EN(0);
  e2:	98 b3       	in	r25, 0x18	; 24
  e4:	9b 7f       	andi	r25, 0xFB	; 251
  e6:	98 bb       	out	0x18, r25	; 24
  e8:	ef e9       	ldi	r30, 0x9F	; 159
  ea:	ff e0       	ldi	r31, 0x0F	; 15
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_write_command+0x6a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_write_command+0x70>
  f2:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(com,3)); //com bit 3 --> D7
  f4:	83 ff       	sbrs	r24, 3
  f6:	04 c0       	rjmp	.+8      	; 0x100 <LCD_write_command+0x7e>
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	90 68       	ori	r25, 0x80	; 128
  fc:	98 bb       	out	0x18, r25	; 24
  fe:	03 c0       	rjmp	.+6      	; 0x106 <LCD_write_command+0x84>
 100:	98 b3       	in	r25, 0x18	; 24
 102:	9f 77       	andi	r25, 0x7F	; 127
 104:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(com,2)); //com bit 2 --> D6
 106:	82 ff       	sbrs	r24, 2
 108:	04 c0       	rjmp	.+8      	; 0x112 <LCD_write_command+0x90>
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	90 64       	ori	r25, 0x40	; 64
 10e:	98 bb       	out	0x18, r25	; 24
 110:	03 c0       	rjmp	.+6      	; 0x118 <LCD_write_command+0x96>
 112:	98 b3       	in	r25, 0x18	; 24
 114:	9f 7b       	andi	r25, 0xBF	; 191
 116:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(com,1)); //com bit 1 --> D5
 118:	81 ff       	sbrs	r24, 1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <LCD_write_command+0xa2>
 11c:	98 b3       	in	r25, 0x18	; 24
 11e:	90 62       	ori	r25, 0x20	; 32
 120:	98 bb       	out	0x18, r25	; 24
 122:	03 c0       	rjmp	.+6      	; 0x12a <LCD_write_command+0xa8>
 124:	98 b3       	in	r25, 0x18	; 24
 126:	9f 7d       	andi	r25, 0xDF	; 223
 128:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(com,0)); //com bit 0 --> D4
 12a:	80 ff       	sbrs	r24, 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <LCD_write_command+0xb4>
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	80 61       	ori	r24, 0x10	; 16
 132:	88 bb       	out	0x18, r24	; 24
 134:	03 c0       	rjmp	.+6      	; 0x13c <LCD_write_command+0xba>
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	88 bb       	out	0x18, r24	; 24
	EN(1);
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	88 bb       	out	0x18, r24	; 24
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_write_command+0xc4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_write_command+0xca>
 14c:	00 00       	nop
	_delay_ms(1);
	EN(0);
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	88 bb       	out	0x18, r24	; 24
 154:	ef e9       	ldi	r30, 0x9F	; 159
 156:	ff e0       	ldi	r31, 0x0F	; 15
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_write_command+0xd6>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_write_command+0xdc>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <LCD_init>:
* Parameters   : void
* Return value :void
**************************************************************************/

void LCD_init(void){
	INIT_LCD_PIN;
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8c 6f       	ori	r24, 0xFC	; 252
 166:	87 bb       	out	0x17, r24	; 23
	LCD_write_command(0x3);
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
 16e:	8f e7       	ldi	r24, 0x7F	; 127
 170:	9e e3       	ldi	r25, 0x3E	; 62
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_init+0x10>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_init+0x16>
 178:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
 180:	8f e7       	ldi	r24, 0x7F	; 127
 182:	9e e3       	ldi	r25, 0x3E	; 62
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_init+0x22>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_init+0x28>
 18a:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
 192:	8f e7       	ldi	r24, 0x7F	; 127
 194:	9e e3       	ldi	r25, 0x3E	; 62
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_init+0x34>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_init+0x3a>
 19c:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
 1a4:	8f e7       	ldi	r24, 0x7F	; 127
 1a6:	9e e3       	ldi	r25, 0x3E	; 62
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_init+0x46>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_init+0x4c>
 1ae:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0x28);
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0x08);
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0x1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0x6);
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0x3);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_command(0xc);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
 1da:	9f ef       	ldi	r25, 0xFF	; 255
 1dc:	29 ef       	ldi	r18, 0xF9	; 249
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <LCD_init+0x7e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_init+0x88>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <LCD_write_data>:
* Return value : void
**************************************************************************/

void LCD_write_data(uint8_t data){
	
	RS(1);
 1ee:	98 b3       	in	r25, 0x18	; 24
 1f0:	98 60       	ori	r25, 0x08	; 8
 1f2:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(data,7)); //com bit 7 --> D7
 1f4:	88 23       	and	r24, r24
 1f6:	24 f4       	brge	.+8      	; 0x200 <LCD_write_data+0x12>
 1f8:	98 b3       	in	r25, 0x18	; 24
 1fa:	90 68       	ori	r25, 0x80	; 128
 1fc:	98 bb       	out	0x18, r25	; 24
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <LCD_write_data+0x18>
 200:	98 b3       	in	r25, 0x18	; 24
 202:	9f 77       	andi	r25, 0x7F	; 127
 204:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,6)); //com bit 6 --> D6
 206:	86 ff       	sbrs	r24, 6
 208:	04 c0       	rjmp	.+8      	; 0x212 <LCD_write_data+0x24>
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	90 64       	ori	r25, 0x40	; 64
 20e:	98 bb       	out	0x18, r25	; 24
 210:	03 c0       	rjmp	.+6      	; 0x218 <LCD_write_data+0x2a>
 212:	98 b3       	in	r25, 0x18	; 24
 214:	9f 7b       	andi	r25, 0xBF	; 191
 216:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,5)); //com bit 5 --> D5
 218:	85 ff       	sbrs	r24, 5
 21a:	04 c0       	rjmp	.+8      	; 0x224 <LCD_write_data+0x36>
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	90 62       	ori	r25, 0x20	; 32
 220:	98 bb       	out	0x18, r25	; 24
 222:	03 c0       	rjmp	.+6      	; 0x22a <LCD_write_data+0x3c>
 224:	98 b3       	in	r25, 0x18	; 24
 226:	9f 7d       	andi	r25, 0xDF	; 223
 228:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,4)); //com bit 4 --> D4
 22a:	84 ff       	sbrs	r24, 4
 22c:	04 c0       	rjmp	.+8      	; 0x236 <LCD_write_data+0x48>
 22e:	98 b3       	in	r25, 0x18	; 24
 230:	90 61       	ori	r25, 0x10	; 16
 232:	98 bb       	out	0x18, r25	; 24
 234:	03 c0       	rjmp	.+6      	; 0x23c <LCD_write_data+0x4e>
 236:	98 b3       	in	r25, 0x18	; 24
 238:	9f 7e       	andi	r25, 0xEF	; 239
 23a:	98 bb       	out	0x18, r25	; 24
	EN(1);
 23c:	98 b3       	in	r25, 0x18	; 24
 23e:	94 60       	ori	r25, 0x04	; 4
 240:	98 bb       	out	0x18, r25	; 24
 242:	ef e9       	ldi	r30, 0x9F	; 159
 244:	ff e0       	ldi	r31, 0x0F	; 15
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_write_data+0x58>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_write_data+0x5e>
 24c:	00 00       	nop
	_delay_ms(1);
	EN(0);
 24e:	98 b3       	in	r25, 0x18	; 24
 250:	9b 7f       	andi	r25, 0xFB	; 251
 252:	98 bb       	out	0x18, r25	; 24
 254:	ef e9       	ldi	r30, 0x9F	; 159
 256:	ff e0       	ldi	r31, 0x0F	; 15
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_write_data+0x6a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_write_data+0x70>
 25e:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3)); //com bit 3 --> D7
 260:	83 ff       	sbrs	r24, 3
 262:	04 c0       	rjmp	.+8      	; 0x26c <LCD_write_data+0x7e>
 264:	98 b3       	in	r25, 0x18	; 24
 266:	90 68       	ori	r25, 0x80	; 128
 268:	98 bb       	out	0x18, r25	; 24
 26a:	03 c0       	rjmp	.+6      	; 0x272 <LCD_write_data+0x84>
 26c:	98 b3       	in	r25, 0x18	; 24
 26e:	9f 77       	andi	r25, 0x7F	; 127
 270:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,2)); //com bit 2 --> D6
 272:	82 ff       	sbrs	r24, 2
 274:	04 c0       	rjmp	.+8      	; 0x27e <LCD_write_data+0x90>
 276:	98 b3       	in	r25, 0x18	; 24
 278:	90 64       	ori	r25, 0x40	; 64
 27a:	98 bb       	out	0x18, r25	; 24
 27c:	03 c0       	rjmp	.+6      	; 0x284 <LCD_write_data+0x96>
 27e:	98 b3       	in	r25, 0x18	; 24
 280:	9f 7b       	andi	r25, 0xBF	; 191
 282:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,1)); //com bit 1 --> D5
 284:	81 ff       	sbrs	r24, 1
 286:	04 c0       	rjmp	.+8      	; 0x290 <LCD_write_data+0xa2>
 288:	98 b3       	in	r25, 0x18	; 24
 28a:	90 62       	ori	r25, 0x20	; 32
 28c:	98 bb       	out	0x18, r25	; 24
 28e:	03 c0       	rjmp	.+6      	; 0x296 <LCD_write_data+0xa8>
 290:	98 b3       	in	r25, 0x18	; 24
 292:	9f 7d       	andi	r25, 0xDF	; 223
 294:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,0)); //com bit 0 --> D4
 296:	80 ff       	sbrs	r24, 0
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <LCD_write_data+0xb4>
 29a:	88 b3       	in	r24, 0x18	; 24
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <LCD_write_data+0xba>
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	88 bb       	out	0x18, r24	; 24
	EN(1);
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_write_data+0xc4>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_write_data+0xca>
 2b8:	00 00       	nop
	_delay_ms(1);
	EN(0);
 2ba:	88 b3       	in	r24, 0x18	; 24
 2bc:	8b 7f       	andi	r24, 0xFB	; 251
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	ef e9       	ldi	r30, 0x9F	; 159
 2c2:	ff e0       	ldi	r31, 0x0F	; 15
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_write_data+0xd6>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_write_data+0xdc>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <LCD_write_string>:
* Purpose      : write complex TXT
* Parameters   : string: Array of character
* Return value : void
**************************************************************************/

void LCD_write_string(uint8_t *string){
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	8c 01       	movw	r16, r24
	int8_t i = 0;
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0'){
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <LCD_write_string+0x12>
		LCD_write_data(string[i]);
 2da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write_data>
		i++;
 2de:	cf 5f       	subi	r28, 0xFF	; 255
* Return value : void
**************************************************************************/

void LCD_write_string(uint8_t *string){
	int8_t i = 0;
	while(string[i] != '\0'){
 2e0:	f8 01       	movw	r30, r16
 2e2:	ec 0f       	add	r30, r28
 2e4:	f1 1d       	adc	r31, r1
 2e6:	c7 fd       	sbrc	r28, 7
 2e8:	fa 95       	dec	r31
 2ea:	80 81       	ld	r24, Z
 2ec:	81 11       	cpse	r24, r1
 2ee:	f5 cf       	rjmp	.-22     	; 0x2da <LCD_write_string+0xc>
		LCD_write_data(string[i]);
		i++;
	}
	
}
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <LCD_shift_str>:
* Purpose      : shift string
* Parameters   : pos: pointer point to the value of pos, 
				 arr: string
* Return value : void
**************************************************************************/
void LCD_shift_str(uint8_t*arr ,uint8_t inc,uint8_t*pos){
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8c 01       	movw	r16, r24
 304:	f6 2e       	mov	r15, r22
 306:	ea 01       	movw	r28, r20
	INITIAL_SHIFTING_PIN
 308:	8a b3       	in	r24, 0x1a	; 26
 30a:	8a bb       	out	0x1a, r24	; 26
 30c:	8b b3       	in	r24, 0x1b	; 27
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	8b bb       	out	0x1b, r24	; 27
 312:	8b b3       	in	r24, 0x1b	; 27
 314:	82 60       	ori	r24, 0x02	; 2
 316:	8b bb       	out	0x1b, r24	; 27
 318:	8b b3       	in	r24, 0x1b	; 27
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	8b b3       	in	r24, 0x1b	; 27
 320:	88 60       	ori	r24, 0x08	; 8
 322:	8b bb       	out	0x1b, r24	; 27
	uint8_t x = 0;
	
	LCD_write_command(*pos);
 324:	88 81       	ld	r24, Y
 326:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
	LCD_write_string(arr);
 32a:	c8 01       	movw	r24, r16
 32c:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_write_string>
	// Shift right
	if(SHIFT_RIGHT == 0){
 330:	c8 99       	sbic	0x19, 0	; 25
 332:	1a c0       	rjmp	.+52     	; 0x368 <LCD_shift_str+0x70>
		LCD_write_command(0x01);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 41 00 	call	0x82	; 0x82 <LCD_write_command>
		if(((*pos) == (0x8f-inc))||((*pos) == (0xcf-inc))){
 33a:	28 81       	ld	r18, Y
 33c:	42 2f       	mov	r20, r18
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	6f 2d       	mov	r22, r15
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8f e8       	ldi	r24, 0x8F	; 143
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	86 1b       	sub	r24, r22
 34a:	97 0b       	sbc	r25, r23
 34c:	48 17       	cp	r20, r24
 34e:	59 07       	cpc	r21, r25
 350:	49 f0       	breq	.+18     	; 0x364 <LCD_shift_str+0x6c>
 352:	8f ec       	ldi	r24, 0xCF	; 207
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	86 1b       	sub	r24, r22
 358:	97 0b       	sbc	r25, r23
 35a:	48 17       	cp	r20, r24
 35c:	59 07       	cpc	r21, r25
 35e:	11 f0       	breq	.+4      	; 0x364 <LCD_shift_str+0x6c>
		}else{
			(*pos)++;
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	28 83       	st	Y, r18
		}
	    while (x == SHIFT_RIGHT); 	
 364:	c8 9b       	sbis	0x19, 0	; 25
 366:	fe cf       	rjmp	.-4      	; 0x364 <LCD_shift_str+0x6c>
	}
	//Shift left
	if(SHIFT_LEFT == 0){
 368:	c9 99       	sbic	0x19, 1	; 25
 36a:	0b c0       	rjmp	.+22     	; 0x382 <LCD_shift_str+0x8a>
		LCD_init();
 36c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_init>
		if(((*pos) == 0x80)||((*pos) == 0xc0)){
 370:	88 81       	ld	r24, Y
 372:	80 38       	cpi	r24, 0x80	; 128
 374:	21 f0       	breq	.+8      	; 0x37e <LCD_shift_str+0x86>
 376:	80 3c       	cpi	r24, 0xC0	; 192
 378:	11 f0       	breq	.+4      	; 0x37e <LCD_shift_str+0x86>
		}else{
			(*pos)--;
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	88 83       	st	Y, r24
		}
	    while (x == SHIFT_LEFT);
 37e:	c9 9b       	sbis	0x19, 1	; 25
 380:	fe cf       	rjmp	.-4      	; 0x37e <LCD_shift_str+0x86>
	}
	// Shift up
	if(SHIFT_UP == 0){
 382:	ca 99       	sbic	0x19, 2	; 25
 384:	09 c0       	rjmp	.+18     	; 0x398 <LCD_shift_str+0xa0>
		LCD_init();
 386:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_init>
		if((*pos) < 0x8f){
 38a:	88 81       	ld	r24, Y
 38c:	8f 38       	cpi	r24, 0x8F	; 143
 38e:	10 f0       	brcs	.+4      	; 0x394 <LCD_shift_str+0x9c>
		}else{
			(*pos) -= 0x40;
 390:	80 54       	subi	r24, 0x40	; 64
 392:	88 83       	st	Y, r24
		}
	    while (x == SHIFT_UP);
 394:	ca 9b       	sbis	0x19, 2	; 25
 396:	fe cf       	rjmp	.-4      	; 0x394 <LCD_shift_str+0x9c>
	}
	//Shift down
	if(SHIFT_DOWN == 0){
 398:	cb 99       	sbic	0x19, 3	; 25
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <LCD_shift_str+0xb6>
		LCD_init();
 39c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_init>
		if((*pos) > 0x8f){
 3a0:	88 81       	ld	r24, Y
 3a2:	80 39       	cpi	r24, 0x90	; 144
 3a4:	10 f4       	brcc	.+4      	; 0x3aa <LCD_shift_str+0xb2>
		}else{
			(*pos) += 0x40;
 3a6:	80 5c       	subi	r24, 0xC0	; 192
 3a8:	88 83       	st	Y, r24
		}
	    while (x == SHIFT_DOWN);
 3aa:	cb 9b       	sbis	0x19, 3	; 25
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <LCD_shift_str+0xb2>
	}
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	08 95       	ret

000003ba <main>:

#include "LCD.h"


int main(void)
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	29 97       	sbiw	r28, 0x09	; 9
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	
	uint8_t* pos_ptr = 0;
	uint8_t arr[] = "mohamed" ;
 3ce:	88 e0       	ldi	r24, 0x08	; 8
 3d0:	e0 e6       	ldi	r30, 0x60	; 96
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	de 01       	movw	r26, r28
 3d6:	11 96       	adiw	r26, 0x01	; 1
 3d8:	01 90       	ld	r0, Z+
 3da:	0d 92       	st	X+, r0
 3dc:	8a 95       	dec	r24
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x1e>
	uint8_t x = 0x80;
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	89 87       	std	Y+9, r24	; 0x09
	pos_ptr = &x;
	LCD_init();
 3e4:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_init>
    while (1) 
    { 
		LCD_shift_str(arr ,7,pos_ptr);
 3e8:	ae 01       	movw	r20, r28
 3ea:	47 5f       	subi	r20, 0xF7	; 247
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	67 e0       	ldi	r22, 0x07	; 7
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_shift_str>
 3f8:	f7 cf       	rjmp	.-18     	; 0x3e8 <main+0x2e>

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
