
Atmega32_LED_EIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000656  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000299  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main(void)
{
    /* Replace with your application code */
	
	// Configure External Interrupt INT0
	SETBIT(SREG, 7);
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
	SETBIT(GICR, 6);
  82:	8b b7       	in	r24, 0x3b	; 59
  84:	80 64       	ori	r24, 0x40	; 64
  86:	8b bf       	out	0x3b, r24	; 59
	
	// Enable falling Edge at INT0
	CLRBIT(MCUCR, 0);
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	85 bf       	out	0x35, r24	; 53
	SETBIT(MCUCR, 1);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	
	//Making PD2(INT0) input pull up
	CLRBIT(DDRD, 2);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	81 bb       	out	0x11, r24	; 17
	SETBIT(PORTD, 2);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	82 bb       	out	0x12, r24	; 18
	//Making PB0 output
	SETBIT(DDRB, 0);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		TOGBIT(PORTB,0);
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 27       	eor	r24, r25
  ac:	88 bb       	out	0x18, r24	; 24
		
		if(inc == 1){
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	49 f4       	brne	.+18     	; 0xc8 <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x40>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x4a>
  c6:	00 00       	nop
			_delay_ms(100);
		}
		
		if((inc == 2)){
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	59 f7       	brne	.-42     	; 0xa6 <main+0x2a>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	89 e6       	ldi	r24, 0x69	; 105
  d4:	98 e1       	ldi	r25, 0x18	; 24
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x64>
  e0:	00 00       	nop
  e2:	e1 cf       	rjmp	.-62     	; 0xa6 <main+0x2a>

000000e4 <__vector_1>:
		
    }
}


ISR(INT0_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
	inc ++;
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(inc == 3) inc = 1;
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	19 f4       	brne	.+6      	; 0x104 <__vector_1+0x20>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
